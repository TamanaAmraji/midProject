
AVRASM ver. 2.1.30  E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm Mon Jul 15 21:31:15 2024

E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1092): warning: Register r9 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1093): warning: Register r8 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1094): warning: Register r11 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1095): warning: Register r10 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1096): warning: Register r12 already defined by the .DEF directive
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _LCD_ref=R4
                 	.DEF _LCD_ref_msb=R5
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _digit1=R9
                 	.DEF _digit2=R8
                 	.DEF _key=R11
                 	.DEF _flag=R10
                 	.DEF _minutes=R12
                 	.DEF _minutes_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 00a1 	JMP  _timer1_compa_isr
000010 940c 00df 	JMP  _timer1_compb_isr
000012 940c 0000 	JMP  0x00
000014 940c 0079 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _segments:
00002a 0040
00002b 0079
00002c 0024
00002d 0030      	.DB  0x40,0x0,0x79,0x0,0x24,0x0,0x30,0x0
00002e 0019
00002f 0012
000030 0002
000031 0078      	.DB  0x19,0x0,0x12,0x0,0x2,0x0,0x78,0x0
000032 0000
000033 0010      	.DB  0x0,0x0,0x10,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0001
000035 0000      	.DB  0x1,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000      	.DB  0x0,0x0
                 
                 _0x3:
E:\1_Github\midProject\CodeVision\Debug\List\Mid.asm(1140): warning: .cseg .db misalignment - padding zero byte
000039 0001      	.DB  0x1
                 _0x4:
00003a 3837
00003b 2f39
00003c 3534
00003d 7836      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x78
00003e 3231
00003f 2d33
000040 3063
000041 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x63,0x30,0x3D,0x2B
                 
                 __GLOBAL_INI_TBL:
000042 000a      	.DW  0x0A
000043 0004      	.DW  0x04
000044 0068      	.DW  __REG_VARS*2
                 
000045 0001      	.DW  0x01
000046 026e      	.DW  _mode
000047 0072      	.DW  _0x3*2
                 
000048 0010      	.DW  0x10
000049 0270      	.DW  _keys
00004a 0074      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
00004b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004c 94f8      	CLI
00004d 27ee      	CLR  R30
00004e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004f e0f1      	LDI  R31,1
000050 bffb      	OUT  GICR,R31
000051 bfeb      	OUT  GICR,R30
000052 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000053 e08d      	LDI  R24,(14-2)+1
000054 e0a2      	LDI  R26,2
000055 27bb      	CLR  R27
                 __CLEAR_REG:
000056 93ed      	ST   X+,R30
000057 958a      	DEC  R24
000058 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000059 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005c 93ed      	ST   X+,R30
00005d 9701      	SBIW R24,1
00005e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005f e8e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000060 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000061 9185      	LPM  R24,Z+
000062 9195      	LPM  R25,Z+
000063 9700      	SBIW R24,0
000064 f061      	BREQ __GLOBAL_INI_END
000065 91a5      	LPM  R26,Z+
000066 91b5      	LPM  R27,Z+
000067 9005      	LPM  R0,Z+
000068 9015      	LPM  R1,Z+
000069 01bf      	MOVW R22,R30
00006a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006b 9005      	LPM  R0,Z+
00006c 920d      	ST   X+,R0
00006d 9701      	SBIW R24,1
00006e f7e1      	BRNE __GLOBAL_INI_LOOP
00006f 01fb      	MOVW R30,R22
000070 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000071 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000072 bfed      	OUT  SPL,R30
000073 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000074 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000075 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000076 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000077 940c 00e0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;int LCD_ref=0x01, i=0, digit[4];
                 ;unsigned char digit1=0,digit2= 0, key, flag;
                 ;   int minutes = 0,seconds = 0,remaining_seconds, remaining_minutes, mode = 1;
                 
                 	.DSEG
                 ;#define col0    PINA.0
                 ;#define col1    PINA.1
                 ;#define col2    PINA.2
                 ;#define col3    PINA.3
                 ;#define Buzzer  PIND.6
                 ;#define LED_PORT PORTB
                 ;
                 ;    const int segments[] =
                 ;     {
                 ;        0x40, // 0
                 ;        0x79, // 1
                 ;        0x24, // 2
                 ;        0x30, // 3
                 ;        0x19, // 4
                 ;        0x12, // 5
                 ;        0x02, // 6
                 ;        0x78, // 7
                 ;        0x00, // 8
                 ;        0x10 // 9
                 ;    };
                 ;
                 ;    char keys[]= {                      //based on keypad model we use in proteus
                 ;              '7', '8', '9', '/',
                 ;              '4', '5', '6', 'x',
                 ;              '1', '2', '3', '-',
                 ;              'c', '0', '=', '+'
                 ;              };
                 ;//
                 ;//   char keys[]= {                       //based on keypad model we use in Lab
                 ;//              '/','1', '2', '3',
                 ;//              '+','4', '5', '6',
                 ;//              '-','7', '8', '9',
                 ;//              'x','c', '0', '='
                 ;//              };
                 ;////
                 ;//char ref[]= {0xF7,0xF6,0xFB,0xF7};
                 ;
                 ;// Function prototypes
                 ;void display_on_seven_segment_minute(char minute);
                 ;void display_on_seven_segment_second(char second);
                 ;char read_keypad();
                 ;int getval(char key);
                 ;void Ready_segment(int on);
                 ;void LightDancer();
                 ;void sound_buzzer();
                 ;void Finish();
                 ;
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0038 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000079 920a      	ST   -Y,R0
00007a 93aa      	ST   -Y,R26
00007b 93ba      	ST   -Y,R27
00007c 93ea      	ST   -Y,R30
00007d 93fa      	ST   -Y,R31
00007e b7ef      	IN   R30,SREG
00007f 93ea      	ST   -Y,R30
                 ; 0000 0039  //Place your code here
                 ; 0000 003A 
                 ; 0000 003B     PORTD = (LCD_ref);
000080 ba42      	OUT  0x12,R4
                 ; 0000 003C     PORTC = (segments[digit[i]]);
000081 01f3      	MOVW R30,R6
000082 e6a0      	LDI  R26,LOW(_digit)
000083 e0b2      	LDI  R27,HIGH(_digit)
000084 0fee      	LSL  R30
000085 1fff      	ROL  R31
000086 0fae      	ADD  R26,R30
000087 1fbf      	ADC  R27,R31
000088 940e 02bf 	CALL __GETW1P
00008a e5a4      	LDI  R26,LOW(_segments*2)
00008b e0b0      	LDI  R27,HIGH(_segments*2)
00008c 0fee      	LSL  R30
00008d 1fff      	ROL  R31
00008e 0fea      	ADD  R30,R26
00008f 1ffb      	ADC  R31,R27
000090 9004      	LPM  R0,Z
000091 ba05      	OUT  0x15,R0
                 ; 0000 003D     LCD_ref = LCD_ref<<1;
000092 d1d1      	RCALL SUBOPT_0x0
                 ; 0000 003E     i++;
                 ; 0000 003F     if (i == 4)
000093 f429      	BRNE _0x5
                 ; 0000 0040     {
                 ; 0000 0041         i = 0;
000094 2466      	CLR  R6
000095 2477      	CLR  R7
                 ; 0000 0042         LCD_ref = 0x01;
000096 e0e1      	LDI  R30,LOW(1)
000097 e0f0      	LDI  R31,HIGH(1)
000098 012f      	MOVW R4,R30
                 ; 0000 0043     }
                 ; 0000 0044 
                 ; 0000 0045 }
                 _0x5:
000099 91e9      	LD   R30,Y+
00009a bfef      	OUT  SREG,R30
00009b 91f9      	LD   R31,Y+
00009c 91e9      	LD   R30,Y+
00009d 91b9      	LD   R27,Y+
00009e 91a9      	LD   R26,Y+
00009f 9009      	LD   R0,Y+
0000a0 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0048 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
0000a1 920a      	ST   -Y,R0
0000a2 921a      	ST   -Y,R1
0000a3 92fa      	ST   -Y,R15
0000a4 936a      	ST   -Y,R22
0000a5 937a      	ST   -Y,R23
0000a6 938a      	ST   -Y,R24
0000a7 939a      	ST   -Y,R25
0000a8 93aa      	ST   -Y,R26
0000a9 93ba      	ST   -Y,R27
0000aa 93ea      	ST   -Y,R30
0000ab 93fa      	ST   -Y,R31
0000ac b7ef      	IN   R30,SREG
0000ad 93ea      	ST   -Y,R30
                 ; 0000 0049     if (remaining_seconds == 0)
0000ae 91e0 026a 	LDS  R30,_remaining_seconds
0000b0 91f0 026b 	LDS  R31,_remaining_seconds+1
0000b2 9730      	SBIW R30,0
0000b3 f4b1      	BRNE _0x6
                 ; 0000 004A     {
                 ; 0000 004B         if (remaining_minutes == 0)
0000b4 91e0 026c 	LDS  R30,_remaining_minutes
0000b6 91f0 026d 	LDS  R31,_remaining_minutes+1
0000b8 9730      	SBIW R30,0
0000b9 f411      	BRNE _0x7
                 ; 0000 004C         {
                 ; 0000 004D             Finish();
0000ba d199      	RCALL _Finish
                 ; 0000 004E         }
                 ; 0000 004F         else
0000bb c00d      	RJMP _0x8
                 _0x7:
                 ; 0000 0050         {
                 ; 0000 0051             remaining_seconds = 59;
0000bc e3eb      	LDI  R30,LOW(59)
0000bd e0f0      	LDI  R31,HIGH(59)
0000be 93e0 026a 	STS  _remaining_seconds,R30
0000c0 93f0 026b 	STS  _remaining_seconds+1,R31
                 ; 0000 0052             remaining_minutes --;
0000c2 e6ac      	LDI  R26,LOW(_remaining_minutes)
0000c3 e0b2      	LDI  R27,HIGH(_remaining_minutes)
0000c4 91ed      	LD   R30,X+
0000c5 91fd      	LD   R31,X+
0000c6 9731      	SBIW R30,1
0000c7 93fe      	ST   -X,R31
0000c8 93ee      	ST   -X,R30
                 ; 0000 0053         }
                 _0x8:
                 ; 0000 0054     }
                 ; 0000 0055     else     remaining_seconds--;
0000c9 c007      	RJMP _0x9
                 _0x6:
0000ca e6aa      	LDI  R26,LOW(_remaining_seconds)
0000cb e0b2      	LDI  R27,HIGH(_remaining_seconds)
0000cc 91ed      	LD   R30,X+
0000cd 91fd      	LD   R31,X+
0000ce 9731      	SBIW R30,1
0000cf 93fe      	ST   -X,R31
0000d0 93ee      	ST   -X,R30
                 ; 0000 0056 }
                 _0x9:
0000d1 91e9      	LD   R30,Y+
0000d2 bfef      	OUT  SREG,R30
0000d3 91f9      	LD   R31,Y+
0000d4 91e9      	LD   R30,Y+
0000d5 91b9      	LD   R27,Y+
0000d6 91a9      	LD   R26,Y+
0000d7 9199      	LD   R25,Y+
0000d8 9189      	LD   R24,Y+
0000d9 9179      	LD   R23,Y+
0000da 9169      	LD   R22,Y+
0000db 90f9      	LD   R15,Y+
0000dc 9019      	LD   R1,Y+
0000dd 9009      	LD   R0,Y+
0000de 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
                 ; 0000 0059 {
                 _timer1_compb_isr:
                 ; .FSTART _timer1_compb_isr
                 ; 0000 005A 
                 ; 0000 005B }
0000df 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 005E {
                 _main:
                 ; .FSTART _main
                 ; 0000 005F 
                 ; 0000 0060 // Set ROWS as outputs and COLS as inputs
                 ; 0000 0061 DDRB = 0xFF; // Assuming led connected to PORTB pins 0-3 as COLS
0000e0 efef      	LDI  R30,LOW(255)
0000e1 bbe7      	OUT  0x17,R30
                 ; 0000 0062 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
0000e2 e0ef      	LDI  R30,LOW(15)
0000e3 bbea      	OUT  0x1A,R30
                 ; 0000 0063 PORTA=(1<<PORTA7) | (1<<PORTA6) |(1<<PORTA5) |(1<<PORTA4) |(0<<PORTA3) |(0<<PORTA2) |(0<<PORTA1) | (0<<PORTA7);
0000e4 efe0      	LDI  R30,LOW(240)
0000e5 bbeb      	OUT  0x1B,R30
                 ; 0000 0064 DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
0000e6 efef      	LDI  R30,LOW(255)
0000e7 bbe4      	OUT  0x14,R30
                 ; 0000 0065 DDRD = 0xFF;
0000e8 bbe1      	OUT  0x11,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 0 initialization
                 ; 0000 0068 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000e9 e0ed      	LDI  R30,LOW(13)
0000ea bfe3      	OUT  0x33,R30
                 ; 0000 0069 TCNT0=0x00;
0000eb e0e0      	LDI  R30,LOW(0)
0000ec bfe2      	OUT  0x32,R30
                 ; 0000 006A OCR0=0x63;
0000ed e6e3      	LDI  R30,LOW(99)
0000ee bfec      	OUT  0x3C,R30
                 ; 0000 006B 
                 ; 0000 006C // Timer/Counter 1 initialization
                 ; 0000 006D TCNT1H=0x00;
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 bded      	OUT  0x2D,R30
                 ; 0000 006E TCNT1L=0x00;
0000f1 bdec      	OUT  0x2C,R30
                 ; 0000 006F ICR1H=0x00;
0000f2 bde7      	OUT  0x27,R30
                 ; 0000 0070 ICR1L=0x00;
0000f3 bde6      	OUT  0x26,R30
                 ; 0000 0071 OCR1AH=0x7A;
0000f4 e7ea      	LDI  R30,LOW(122)
0000f5 bdeb      	OUT  0x2B,R30
                 ; 0000 0072 OCR1AL=0x11;
0000f6 e1e1      	LDI  R30,LOW(17)
0000f7 bdea      	OUT  0x2A,R30
                 ; 0000 0073 OCR1BH=0x00;
0000f8 e0e0      	LDI  R30,LOW(0)
0000f9 bde9      	OUT  0x29,R30
                 ; 0000 0074 OCR1BL=0x00;
0000fa bde8      	OUT  0x28,R30
                 ; 0000 0075 //
                 ; 0000 0076 //// Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0077 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000fb e1ea      	LDI  R30,LOW(26)
0000fc bfe9      	OUT  0x39,R30
                 ; 0000 0078 
                 ; 0000 0079 // Global enable interrupts
                 ; 0000 007A #asm("sei")
0000fd 9478      	sei
                 ; 0000 007B while (1)
                 _0xA:
                 ; 0000 007C       {
                 ; 0000 007D       // Place your code here
                 ; 0000 007E        key = read_keypad();
0000fe d041      	RCALL _read_keypad
0000ff 2ebe      	MOV  R11,R30
                 ; 0000 007F        getval(key);
000100 2dab      	MOV  R26,R11
000101 d0a0      	RCALL _getval
                 ; 0000 0080        display_on_seven_segment_second(remaining_seconds);
000102 91a0 026a 	LDS  R26,_remaining_seconds
000104 d030      	RCALL _display_on_seven_segment_second
                 ; 0000 0081        display_on_seven_segment_minute(remaining_minutes);
000105 91a0 026c 	LDS  R26,_remaining_minutes
000107 d022      	RCALL _display_on_seven_segment_minute
                 ; 0000 0082       }
000108 cff5      	RJMP _0xA
                 ; 0000 0083 }
                 _0xD:
000109 cfff      	RJMP _0xD
                 ; .FEND
                 ;
                 ;//FUNCTIONS
                 ;    void Ready_segment(int on)
                 ; 0000 0087     {
                 _Ready_segment:
                 ; .FSTART _Ready_segment
                 ; 0000 0088        if (on == 1)
00010a 93ba      	ST   -Y,R27
00010b 93aa      	ST   -Y,R26
                 ;	on -> Y+0
00010c 81a8      	LD   R26,Y
00010d 81b9      	LDD  R27,Y+1
00010e 9711      	SBIW R26,1
00010f f491      	BRNE _0xE
                 ; 0000 0089        {
                 ; 0000 008A            TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000110 e0e0      	LDI  R30,LOW(0)
000111 bfe3      	OUT  0x33,R30
                 ; 0000 008B            PORTD = (LCD_ref);
000112 ba42      	OUT  0x12,R4
                 ; 0000 008C            PORTC = (0x40);
000113 e4e0      	LDI  R30,LOW(64)
000114 bbe5      	OUT  0x15,R30
                 ; 0000 008D            delay_ms(150);
000115 e9a6      	LDI  R26,LOW(150)
000116 e0b0      	LDI  R27,0
000117 940e 027d 	CALL _delay_ms
                 ; 0000 008E            PORTD = (LCD_ref);
000119 ba42      	OUT  0x12,R4
                 ; 0000 008F            LCD_ref = LCD_ref<<1;
00011a d149      	RCALL SUBOPT_0x0
                 ; 0000 0090            i++;
                 ; 0000 0091            if (i == 4)
00011b f429      	BRNE _0xF
                 ; 0000 0092            {
                 ; 0000 0093             i = 0;
00011c 2466      	CLR  R6
00011d 2477      	CLR  R7
                 ; 0000 0094             LCD_ref = 0x01;
00011e e0e1      	LDI  R30,LOW(1)
00011f e0f0      	LDI  R31,HIGH(1)
000120 012f      	MOVW R4,R30
                 ; 0000 0095            }
                 ; 0000 0096        }
                 _0xF:
                 ; 0000 0097        else if (on == 0)
000121 c006      	RJMP _0x10
                 _0xE:
000122 81e8      	LD   R30,Y
000123 81f9      	LDD  R31,Y+1
000124 9730      	SBIW R30,0
000125 f411      	BRNE _0x11
                 ; 0000 0098        {
                 ; 0000 0099         TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
000126 e0ed      	LDI  R30,LOW(13)
000127 bfe3      	OUT  0x33,R30
                 ; 0000 009A        }
                 ; 0000 009B     }
                 _0x11:
                 _0x10:
000128 9622      	ADIW R28,2
000129 9508      	RET
                 ; .FEND
                 ;
                 ;    void display_on_seven_segment_minute(char minute)
                 ; 0000 009E     {
                 _display_on_seven_segment_minute:
                 ; .FSTART _display_on_seven_segment_minute
                 ; 0000 009F         // Extract digits from the number
                 ; 0000 00A0          digit[1] = minute % 10;
00012a d143      	RCALL SUBOPT_0x1
                 ;	minute -> Y+0
                +
00012b 93e0 0262+STS _digit + ( 2 ) , R30
00012d 93f0 0263+STS _digit + ( 2 ) + 1 , R31
                 	__PUTW1MN _digit,2
                 ; 0000 00A1          digit[0] = minute / 10;
00012f d146      	RCALL SUBOPT_0x2
000130 93e0 0260 	STS  _digit,R30
000132 93f0 0261 	STS  _digit+1,R31
                 ; 0000 00A2     }
000134 c0e4      	RJMP _0x2000001
                 ; .FEND
                 ;    void display_on_seven_segment_second(char second)
                 ; 0000 00A4      {
                 _display_on_seven_segment_second:
                 ; .FSTART _display_on_seven_segment_second
                 ; 0000 00A5         // Extract digits from the number
                 ; 0000 00A6          digit[3] = second % 10;
000135 d138      	RCALL SUBOPT_0x1
                 ;	second -> Y+0
                +
000136 93e0 0266+STS _digit + ( 6 ) , R30
000138 93f0 0267+STS _digit + ( 6 ) + 1 , R31
                 	__PUTW1MN _digit,6
                 ; 0000 00A7          digit[2] = second / 10;
00013a d13b      	RCALL SUBOPT_0x2
                +
00013b 93e0 0264+STS _digit + ( 4 ) , R30
00013d 93f0 0265+STS _digit + ( 4 ) + 1 , R31
                 	__PUTW1MN _digit,4
                 ; 0000 00A8     }
00013f c0d9      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;    char read_keypad() {
                 ; 0000 00AA char read_keypad() {
                 _read_keypad:
                 ; .FSTART _read_keypad
                 ; 0000 00AB    // Loop through each ROW and check for key press
                 ; 0000 00AC         PORTA.0=0;PORTA.1=1;PORTA.2=1;PORTA.3=1;
000140 98d8      	CBI  0x1B,0
000141 9ad9      	SBI  0x1B,1
000142 9ada      	SBI  0x1B,2
000143 9adb      	SBI  0x1B,3
                 ; 0000 00AD         if(!PINA.4) return keys[0];
000144 99cc      	SBIC 0x19,4
000145 c003      	RJMP _0x1A
000146 91e0 0270 	LDS  R30,_keys
000148 9508      	RET
                 ; 0000 00AE         if(!PINA.5) return keys[1];
                 _0x1A:
000149 99cd      	SBIC 0x19,5
00014a c003      	RJMP _0x1B
                +
00014b 91e0 0271+LDS R30 , _keys + ( 1 )
                 	__GETB1MN _keys,1
00014d 9508      	RET
                 ; 0000 00AF         if(!PINA.6) return keys[2];
                 _0x1B:
00014e 99ce      	SBIC 0x19,6
00014f c003      	RJMP _0x1C
                +
000150 91e0 0272+LDS R30 , _keys + ( 2 )
                 	__GETB1MN _keys,2
000152 9508      	RET
                 ; 0000 00B0         if(!PINA.7) return keys[3];
                 _0x1C:
000153 99cf      	SBIC 0x19,7
000154 c003      	RJMP _0x1D
                +
000155 91e0 0273+LDS R30 , _keys + ( 3 )
                 	__GETB1MN _keys,3
000157 9508      	RET
                 ; 0000 00B1         PORTA.0=1;PORTA.1=0;PORTA.2=1;PORTA.3=1;
                 _0x1D:
000158 9ad8      	SBI  0x1B,0
000159 98d9      	CBI  0x1B,1
00015a 9ada      	SBI  0x1B,2
00015b 9adb      	SBI  0x1B,3
                 ; 0000 00B2         if(!PINA.4) return keys[4];
00015c 99cc      	SBIC 0x19,4
00015d c003      	RJMP _0x26
                +
00015e 91e0 0274+LDS R30 , _keys + ( 4 )
                 	__GETB1MN _keys,4
000160 9508      	RET
                 ; 0000 00B3         if(!PINA.5) return keys[5];
                 _0x26:
000161 99cd      	SBIC 0x19,5
000162 c003      	RJMP _0x27
                +
000163 91e0 0275+LDS R30 , _keys + ( 5 )
                 	__GETB1MN _keys,5
000165 9508      	RET
                 ; 0000 00B4         if(!PINA.6) return keys[6];
                 _0x27:
000166 99ce      	SBIC 0x19,6
000167 c003      	RJMP _0x28
                +
000168 91e0 0276+LDS R30 , _keys + ( 6 )
                 	__GETB1MN _keys,6
00016a 9508      	RET
                 ; 0000 00B5         if(!PINA.7) return keys[7];
                 _0x28:
00016b 99cf      	SBIC 0x19,7
00016c c003      	RJMP _0x29
                +
00016d 91e0 0277+LDS R30 , _keys + ( 7 )
                 	__GETB1MN _keys,7
00016f 9508      	RET
                 ; 0000 00B6         PORTA.0=1;PORTA.1=1;PORTA.2=0;PORTA.3=1;
                 _0x29:
000170 9ad8      	SBI  0x1B,0
000171 9ad9      	SBI  0x1B,1
000172 98da      	CBI  0x1B,2
000173 9adb      	SBI  0x1B,3
                 ; 0000 00B7         if(!PINA.4) return keys[8];
000174 99cc      	SBIC 0x19,4
000175 c003      	RJMP _0x32
                +
000176 91e0 0278+LDS R30 , _keys + ( 8 )
                 	__GETB1MN _keys,8
000178 9508      	RET
                 ; 0000 00B8         if(!PINA.5) return keys[9];
                 _0x32:
000179 99cd      	SBIC 0x19,5
00017a c003      	RJMP _0x33
                +
00017b 91e0 0279+LDS R30 , _keys + ( 9 )
                 	__GETB1MN _keys,9
00017d 9508      	RET
                 ; 0000 00B9         if(!PINA.6) return keys[10];
                 _0x33:
00017e 99ce      	SBIC 0x19,6
00017f c003      	RJMP _0x34
                +
000180 91e0 027a+LDS R30 , _keys + ( 10 )
                 	__GETB1MN _keys,10
000182 9508      	RET
                 ; 0000 00BA         if(!PINA.7) return keys[11];
                 _0x34:
000183 99cf      	SBIC 0x19,7
000184 c003      	RJMP _0x35
                +
000185 91e0 027b+LDS R30 , _keys + ( 11 )
                 	__GETB1MN _keys,11
000187 9508      	RET
                 ; 0000 00BB         PORTA.0=1;PORTA.1=1;PORTA.2=1;PORTA.3=0;
                 _0x35:
000188 9ad8      	SBI  0x1B,0
000189 9ad9      	SBI  0x1B,1
00018a 9ada      	SBI  0x1B,2
00018b 98db      	CBI  0x1B,3
                 ; 0000 00BC         if(!PINA.4) return keys[12];
00018c 99cc      	SBIC 0x19,4
00018d c003      	RJMP _0x3E
                +
00018e 91e0 027c+LDS R30 , _keys + ( 12 )
                 	__GETB1MN _keys,12
000190 9508      	RET
                 ; 0000 00BD         if(!PINA.5) return keys[13];
                 _0x3E:
000191 99cd      	SBIC 0x19,5
000192 c003      	RJMP _0x3F
                +
000193 91e0 027d+LDS R30 , _keys + ( 13 )
                 	__GETB1MN _keys,13
000195 9508      	RET
                 ; 0000 00BE         if(!PINA.6) return keys[14];
                 _0x3F:
000196 99ce      	SBIC 0x19,6
000197 c003      	RJMP _0x40
                +
000198 91e0 027e+LDS R30 , _keys + ( 14 )
                 	__GETB1MN _keys,14
00019a 9508      	RET
                 ; 0000 00BF         if(!PINA.7) return keys[15];
                 _0x40:
00019b 99cf      	SBIC 0x19,7
00019c c003      	RJMP _0x41
                +
00019d 91e0 027f+LDS R30 , _keys + ( 15 )
                 	__GETB1MN _keys,15
00019f 9508      	RET
                 ; 0000 00C0         return 16;
                 _0x41:
0001a0 e1e0      	LDI  R30,LOW(16)
0001a1 9508      	RET
                 ; 0000 00C1     }
                 ; .FEND
                 ;
                 ;    int getval(char key)
                 ; 0000 00C4     {
                 _getval:
                 ; .FSTART _getval
                 ; 0000 00C5         if (key != 16)  //if any key was pressed
0001a2 93aa      	ST   -Y,R26
                 ;	key -> Y+0
0001a3 81a8      	LD   R26,Y
0001a4 31a0      	CPI  R26,LOW(0x10)
0001a5 f409      	BRNE PC+2
0001a6 c06d      	RJMP _0x42
                 ; 0000 00C6        {
                 ; 0000 00C7        mode = 0;
0001a7 e0e0      	LDI  R30,LOW(0)
0001a8 93e0 026e 	STS  _mode,R30
0001aa 93e0 026f 	STS  _mode+1,R30
                 ; 0000 00C8        while(1)
                 _0x43:
                 ; 0000 00C9        {
                 ; 0000 00CA         if (key == '-')
0001ac 81a8      	LD   R26,Y
0001ad 32ad      	CPI  R26,LOW(0x2D)
0001ae f451      	BRNE _0x46
                 ; 0000 00CB         {
                 ; 0000 00CC          remaining_minutes=0;
0001af e0e0      	LDI  R30,LOW(0)
0001b0 93e0 026c 	STS  _remaining_minutes,R30
0001b2 93e0 026d 	STS  _remaining_minutes+1,R30
                 ; 0000 00CD          remaining_seconds=0;
0001b4 93e0 026a 	STS  _remaining_seconds,R30
0001b6 93e0 026b 	STS  _remaining_seconds+1,R30
                 ; 0000 00CE          break;
0001b8 c05b      	RJMP _0x45
                 ; 0000 00CF         }
                 ; 0000 00D0         if (remaining_seconds)
                 _0x46:
0001b9 91e0 026a 	LDS  R30,_remaining_seconds
0001bb 91f0 026b 	LDS  R31,_remaining_seconds+1
0001bd 9730      	SBIW R30,0
0001be f041      	BREQ _0x47
                 ; 0000 00D1             {
                 ; 0000 00D2              if ( key == 'c')
0001bf 81a8      	LD   R26,Y
0001c0 36a3      	CPI  R26,LOW(0x63)
0001c1 f429      	BRNE _0x48
                 ; 0000 00D3              {
                 ; 0000 00D4                    LED_PORT = 0x00;
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 bbe8      	OUT  0x18,R30
                 ; 0000 00D5                    TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0001c4 e0ec      	LDI  R30,LOW(12)
0001c5 bdee      	OUT  0x2E,R30
                 ; 0000 00D6                    break;
0001c6 c04d      	RJMP _0x45
                 ; 0000 00D7              }
                 ; 0000 00D8         }
                 _0x48:
                 ; 0000 00D9 
                 ; 0000 00DA         if( key == '=')
                 _0x47:
0001c7 81a8      	LD   R26,Y
0001c8 33ad      	CPI  R26,LOW(0x3D)
0001c9 f471      	BRNE _0x49
                 ; 0000 00DB         {
                 ; 0000 00DC             seconds = digit2;
0001ca 2de8      	MOV  R30,R8
0001cb e0f0      	LDI  R31,0
0001cc 93e0 0268 	STS  _seconds,R30
0001ce 93f0 0269 	STS  _seconds+1,R31
                 ; 0000 00DD             remaining_seconds= seconds;
0001d0 93e0 026a 	STS  _remaining_seconds,R30
0001d2 93f0 026b 	STS  _remaining_seconds+1,R31
                 ; 0000 00DE             digit1 =0;
0001d4 2499      	CLR  R9
                 ; 0000 00DF             LED_PORT = 0x55;;
0001d5 e5e5      	LDI  R30,LOW(85)
0001d6 bbe8      	OUT  0x18,R30
                 ; 0000 00E0             break;
0001d7 c03c      	RJMP _0x45
                 ; 0000 00E1         }
                 ; 0000 00E2         if ( key == '+')        //if + was entered
                 _0x49:
0001d8 81a8      	LD   R26,Y
0001d9 32ab      	CPI  R26,LOW(0x2B)
0001da f499      	BRNE _0x4A
                 ; 0000 00E3         {
                 ; 0000 00E4             minutes= digit2;
0001db 2cc8      	MOV  R12,R8
0001dc 24dd      	CLR  R13
                 ; 0000 00E5             if (minutes > 59) remaining_minutes = 59;
0001dd e3eb      	LDI  R30,LOW(59)
0001de e0f0      	LDI  R31,HIGH(59)
0001df 15ec      	CP   R30,R12
0001e0 05fd      	CPC  R31,R13
0001e1 f424      	BRGE _0x4B
0001e2 93e0 026c 	STS  _remaining_minutes,R30
0001e4 93f0 026d 	STS  _remaining_minutes+1,R31
                 ; 0000 00E6             remaining_minutes= minutes;
                 _0x4B:
                +
0001e6 92c0 026c+STS _remaining_minutes + ( 0 ) , R12
0001e8 92d0 026d+STS _remaining_minutes + ( 0 ) + 1 , R13
                 	__PUTWMRN _remaining_minutes,0,12,13
                 ; 0000 00E7             digit1=0;
0001ea 2499      	CLR  R9
                 ; 0000 00E8             LED_PORT = ~(0x55);
0001eb eaea      	LDI  R30,LOW(170)
0001ec bbe8      	OUT  0x18,R30
                 ; 0000 00E9             break;
0001ed c026      	RJMP _0x45
                 ; 0000 00EA         }
                 ; 0000 00EB         if (digit1 || flag)
                 _0x4A:
0001ee 2099      	TST  R9
0001ef f411      	BRNE _0x4D
0001f0 20aa      	TST  R10
0001f1 f089      	BREQ _0x4C
                 _0x4D:
                 ; 0000 00EC         {
                 ; 0000 00ED             if (flag ==1)
0001f2 e0e1      	LDI  R30,LOW(1)
0001f3 15ea      	CP   R30,R10
0001f4 f429      	BRNE _0x4F
                 ; 0000 00EE             {
                 ; 0000 00EF                 digit2 = /*(digit1 *10) +*/ key - '0';
0001f5 81e8      	LD   R30,Y
0001f6 53e0      	SUBI R30,LOW(48)
0001f7 2e8e      	MOV  R8,R30
                 ; 0000 00F0                 flag =0;
0001f8 24aa      	CLR  R10
                 ; 0000 00F1                 break;
0001f9 c01a      	RJMP _0x45
                 ; 0000 00F2             }
                 ; 0000 00F3             else
                 _0x4F:
                 ; 0000 00F4             {
                 ; 0000 00F5                 digit2 = (digit1 *10) + key - '0';
0001fa 2de9      	MOV  R30,R9
0001fb e0aa      	LDI  R26,LOW(10)
0001fc 02ea      	MULS R30,R26
0001fd 01f0      	MOVW R30,R0
0001fe 81a8      	LD   R26,Y
0001ff 0fae      	ADD  R26,R30
000200 53a0      	SUBI R26,LOW(48)
000201 2e8a      	MOV  R8,R26
                 ; 0000 00F6                 break;
000202 c011      	RJMP _0x45
                 ; 0000 00F7             }
                 ; 0000 00F8 
                 ; 0000 00F9             break;
                 ; 0000 00FA         }
                 ; 0000 00FB         if ( (key >= '0') && (key<= '9') )
                 _0x4C:
000203 81a8      	LD   R26,Y
000204 33a0      	CPI  R26,LOW(0x30)
000205 f010      	BRLO _0x52
000206 33aa      	CPI  R26,LOW(0x3A)
000207 f008      	BRLO _0x53
                 _0x52:
000208 c00a      	RJMP _0x51
                 _0x53:
                 ; 0000 00FC         {
                 ; 0000 00FD             digit1 = key - '0';
000209 81e8      	LD   R30,Y
00020a 53e0      	SUBI R30,LOW(48)
00020b 2e9e      	MOV  R9,R30
                 ; 0000 00FE             if (digit1 ==0) flag = 1;
00020c 2099      	TST  R9
00020d f411      	BRNE _0x54
00020e e0e1      	LDI  R30,LOW(1)
00020f 2eae      	MOV  R10,R30
                 ; 0000 00FF             return digit1;
                 _0x54:
000210 2de9      	MOV  R30,R9
000211 e0f0      	LDI  R31,0
000212 c006      	RJMP _0x2000001
                 ; 0000 0100         }
                 ; 0000 0101        }
                 _0x51:
000213 cf98      	RJMP _0x43
                 _0x45:
                 ; 0000 0102       }
                 ; 0000 0103       Ready_segment(mode);
                 _0x42:
000214 91a0 026e 	LDS  R26,_mode
000216 91b0 026f 	LDS  R27,_mode+1
000218 def1      	RCALL _Ready_segment
                 ; 0000 0104     }
                 _0x2000001:
000219 9621      	ADIW R28,1
00021a 9508      	RET
                 ; .FEND
                 ;
                 ;    void LightDancer()
                 ; 0000 0107 	{
                 _LightDancer:
                 ; .FSTART _LightDancer
                 ; 0000 0108 		int a;
                 ; 0000 0109 		char led[]=
                 ; 0000 010A          {
                 ; 0000 010B 			0b11111111,
                 ; 0000 010C 			0b11100111,
                 ; 0000 010D 			0b11000011,
                 ; 0000 010E 			0b10000001,
                 ; 0000 010F 			0b00000000,
                 ; 0000 0110          };
                 ; 0000 0111 
                 ; 0000 0112 		for (a=0;a<=5;a++)
00021b 9725      	SBIW R28,5
00021c efef      	LDI  R30,LOW(255)
00021d 83e8      	ST   Y,R30
00021e eee7      	LDI  R30,LOW(231)
00021f 83e9      	STD  Y+1,R30
000220 ece3      	LDI  R30,LOW(195)
000221 83ea      	STD  Y+2,R30
000222 e8e1      	LDI  R30,LOW(129)
000223 83eb      	STD  Y+3,R30
000224 e0e0      	LDI  R30,LOW(0)
000225 83ec      	STD  Y+4,R30
000226 931a      	ST   -Y,R17
000227 930a      	ST   -Y,R16
                 ;	a -> R16,R17
                 ;	led -> Y+2
                +
000228 e000     +LDI R16 , LOW ( 0 )
000229 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x56:
                +
00022a 3006     +CPI R16 , LOW ( 6 )
00022b e0e0     +LDI R30 , HIGH ( 6 )
00022c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,6
00022d f46c      	BRGE _0x57
                 ; 0000 0113 		{
                 ; 0000 0114 			PORTB=led[a];
00022e 01de      	MOVW R26,R28
00022f 9612      	ADIW R26,2
000230 0fa0      	ADD  R26,R16
000231 1fb1      	ADC  R27,R17
000232 91ec      	LD   R30,X
000233 bbe8      	OUT  0x18,R30
                 ; 0000 0115 			delay_ms(100);
000234 e6a4      	LDI  R26,LOW(100)
000235 e0b0      	LDI  R27,0
000236 940e 027d 	CALL _delay_ms
                 ; 0000 0116 		};
                +
000238 5f0f     +SUBI R16 , LOW ( - 1 )
000239 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00023a cfef      	RJMP _0x56
                 _0x57:
                 ; 0000 0117         for (a=4;a>=0;a--)
                +
00023b e004     +LDI R16 , LOW ( 4 )
00023c e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                 _0x59:
00023d 2311      	TST  R17
00023e f072      	BRMI _0x5A
                 ; 0000 0118 		{
                 ; 0000 0119 			LED_PORT= ~(led[a]);
00023f 01de      	MOVW R26,R28
000240 9612      	ADIW R26,2
000241 0fa0      	ADD  R26,R16
000242 1fb1      	ADC  R27,R17
000243 91ec      	LD   R30,X
000244 95e0      	COM  R30
000245 bbe8      	OUT  0x18,R30
                 ; 0000 011A 			delay_ms(100);
000246 e6a4      	LDI  R26,LOW(100)
000247 e0b0      	LDI  R27,0
000248 940e 027d 	CALL _delay_ms
                 ; 0000 011B 		}
                +
00024a 5001     +SUBI R16 , LOW ( 1 )
00024b 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
00024c cff0      	RJMP _0x59
                 _0x5A:
                 ; 0000 011C 	}
00024d 8119      	LDD  R17,Y+1
00024e 8108      	LDD  R16,Y+0
00024f 9627      	ADIW R28,7
000250 9508      	RET
                 ; .FEND
                 ;
                 ;    void sound_buzzer()
                 ; 0000 011F     {
                 _sound_buzzer:
                 ; .FSTART _sound_buzzer
                 ; 0000 0120         PORTD = 0xFF;
000251 efef      	LDI  R30,LOW(255)
000252 bbe2      	OUT  0x12,R30
                 ; 0000 0121 //        delay_ms(500);
                 ; 0000 0122 //        PORTD = 0;
                 ; 0000 0123 //        delay_ms(500);
                 ; 0000 0124 //        PORTD = 1;
                 ; 0000 0125 //        delay_ms(500);
                 ; 0000 0126 //        PORTD = 0;
                 ; 0000 0127     }
000253 9508      	RET
                 ; .FEND
                 ;
                 ;    void Finish()
                 ; 0000 012A     {
                 _Finish:
                 ; .FSTART _Finish
                 ; 0000 012B      TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000254 e0e0      	LDI  R30,LOW(0)
000255 bfe3      	OUT  0x33,R30
                 ; 0000 012C      TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000256 bdee      	OUT  0x2E,R30
                 ; 0000 012D      sound_buzzer();
000257 dff9      	RCALL _sound_buzzer
                 ; 0000 012E      LightDancer();
000258 dfc2      	RCALL _LightDancer
                 ; 0000 012F      PORTC = 0x40;
000259 e4e0      	LDI  R30,LOW(64)
00025a bbe5      	OUT  0x15,R30
                 ; 0000 0130      PORTD = 0x0F;
00025b e0ef      	LDI  R30,LOW(15)
00025c bbe2      	OUT  0x12,R30
                 ; 0000 0131      mode = 1;
00025d e0e1      	LDI  R30,LOW(1)
00025e e0f0      	LDI  R31,HIGH(1)
00025f 93e0 026e 	STS  _mode,R30
000261 93f0 026f 	STS  _mode+1,R31
                 ; 0000 0132     }
000263 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 
                 	.DSEG
                 _digit:
000260           	.BYTE 0x8
                 _seconds:
000268           	.BYTE 0x2
                 _remaining_seconds:
00026a           	.BYTE 0x2
                 _remaining_minutes:
00026c           	.BYTE 0x2
                 _mode:
00026e           	.BYTE 0x2
                 _keys:
000270           	.BYTE 0x10
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000264 0c44      	LSL  R4
000265 1c55      	ROL  R5
000266 01f3      	MOVW R30,R6
000267 9631      	ADIW R30,1
000268 013f      	MOVW R6,R30
000269 e0e4      	LDI  R30,LOW(4)
00026a e0f0      	LDI  R31,HIGH(4)
00026b 15e6      	CP   R30,R6
00026c 05f7      	CPC  R31,R7
00026d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
00026e 93aa      	ST   -Y,R26
00026f 81a8      	LD   R26,Y
000270 27bb      	CLR  R27
000271 e0ea      	LDI  R30,LOW(10)
000272 e0f0      	LDI  R31,HIGH(10)
000273 940e 02a3 	CALL __MODW21
000275 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000276 81a8      	LD   R26,Y
000277 e0b0      	LDI  R27,0
000278 e0ea      	LDI  R30,LOW(10)
000279 e0f0      	LDI  R31,HIGH(10)
00027a 940e 029e 	CALL __DIVW21
00027c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00027d 9610      	adiw r26,0
00027e f039      	breq __delay_ms1
                 __delay_ms0:
00027f 95a8      	wdr
                +
000280 ed80     +LDI R24 , LOW ( 0x7D0 )
000281 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000282 9701     +SBIW R24 , 1
000283 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000284 9711      	sbiw r26,1
000285 f7c9      	brne __delay_ms0
                 __delay_ms1:
000286 9508      	ret
                 
                 __ANEGW1:
000287 95f1      	NEG  R31
000288 95e1      	NEG  R30
000289 40f0      	SBCI R31,0
00028a 9508      	RET
                 
                 __DIVW21U:
00028b 2400      	CLR  R0
00028c 2411      	CLR  R1
00028d e190      	LDI  R25,16
                 __DIVW21U1:
00028e 0faa      	LSL  R26
00028f 1fbb      	ROL  R27
000290 1c00      	ROL  R0
000291 1c11      	ROL  R1
000292 1a0e      	SUB  R0,R30
000293 0a1f      	SBC  R1,R31
000294 f418      	BRCC __DIVW21U2
000295 0e0e      	ADD  R0,R30
000296 1e1f      	ADC  R1,R31
000297 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000298 60a1      	SBR  R26,1
                 __DIVW21U3:
000299 959a      	DEC  R25
00029a f799      	BRNE __DIVW21U1
00029b 01fd      	MOVW R30,R26
00029c 01d0      	MOVW R26,R0
00029d 9508      	RET
                 
                 __DIVW21:
00029e d012      	RCALL __CHKSIGNW
00029f dfeb      	RCALL __DIVW21U
0002a0 f40e      	BRTC __DIVW211
0002a1 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0002a2 9508      	RET
                 
                 __MODW21:
0002a3 94e8      	CLT
0002a4 ffb7      	SBRS R27,7
0002a5 c004      	RJMP __MODW211
0002a6 95a0      	COM  R26
0002a7 95b0      	COM  R27
0002a8 9611      	ADIW R26,1
0002a9 9468      	SET
                 __MODW211:
0002aa fdf7      	SBRC R31,7
0002ab dfdb      	RCALL __ANEGW1
0002ac dfde      	RCALL __DIVW21U
0002ad 01fd      	MOVW R30,R26
0002ae f40e      	BRTC __MODW212
0002af dfd7      	RCALL __ANEGW1
                 __MODW212:
0002b0 9508      	RET
                 
                 __CHKSIGNW:
0002b1 94e8      	CLT
0002b2 fff7      	SBRS R31,7
0002b3 c002      	RJMP __CHKSW1
0002b4 dfd2      	RCALL __ANEGW1
0002b5 9468      	SET
                 __CHKSW1:
0002b6 ffb7      	SBRS R27,7
0002b7 c006      	RJMP __CHKSW2
0002b8 95a0      	COM  R26
0002b9 95b0      	COM  R27
0002ba 9611      	ADIW R26,1
0002bb f800      	BLD  R0,0
0002bc 9403      	INC  R0
0002bd fa00      	BST  R0,0
                 __CHKSW2:
0002be 9508      	RET
                 
                 __GETW1P:
0002bf 91ed      	LD   R30,X+
0002c0 91fc      	LD   R31,X
0002c1 9711      	SBIW R26,1
0002c2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  19 r1 :   7 r2 :   0 r3 :   0 r4 :   6 r5 :   1 r6 :   6 r7 :   3 
r8 :   4 r9 :   7 r10:   4 r11:   2 r12:   3 r13:   3 r14:   0 r15:   2 
r16:   9 r17:  10 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   7 r26:  64 r27:  27 r28:   7 r29:   1 r30: 186 r31:  47 
x  :  15 y  :  64 z  :   8 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   6 
adiw  :   9 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   1 brne  :  20 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   6 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 
cp    :   3 cpc   :   3 cpi   :   8 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  22 ld    :  39 ldd   :   4 ldi   :  87 
lds   :  26 lpm   :   9 lsl   :   4 lsr   :   0 mov   :  10 movw  :  14 
mul   :   0 muls  :   1 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  43 pop   :   0 push  :   0 rcall :  21 ret   :  32 
reti  :   3 rjmp  :  40 rol   :   6 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :  12 sbic  :  16 sbis  :   0 sbiw  :  14 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :   4 sts   :  26 sub   :   1 subi  :   5 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000586   1346     68   1414   32768   4.3%
[.dseg] 0x000060 0x000280      0     32     32    2048   1.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
