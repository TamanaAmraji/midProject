
AVRASM ver. 2.1.30  C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm Thu Jun 13 22:23:04 2024

C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _LCD_ref=R4
                 	.DEF _LCD_ref_msb=R5
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _row=R8
                 	.DEF _row_msb=R9
                 	.DEF _col=R10
                 	.DEF _col_msb=R11
                 	.DEF _pos=R12
                 	.DEF _pos_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0049 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0076 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _segments:
00002a 0040
00002b 0079
00002c 0024
00002d 0030      	.DB  0x40,0x0,0x79,0x0,0x24,0x0,0x30,0x0
00002e 0019
00002f 0012
000030 0002
000031 0078      	.DB  0x19,0x0,0x12,0x0,0x2,0x0,0x78,0x0
000032 0000
000033 0010      	.DB  0x0,0x0,0x10,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0001
000035 0000      	.DB  0x1,0x0,0x0,0x0
000036 0000
000037 ffff      	.DB  0x0,0x0,0xFF,0xFF
000038 ffff      	.DB  0xFF,0xFF
                 
                 _0x3:
000039 f6f7
00003a f7fb      	.DB  0xF7,0xF6,0xFB,0xF7
                 _0xA:
00003b 0040
00003c 0079
00003d 0024
00003e 0030      	.DB  0x40,0x0,0x79,0x0,0x24,0x0,0x30,0x0
00003f 0019
000040 0012
000041 0002
000042 0078      	.DB  0x19,0x0,0x12,0x0,0x2,0x0,0x78,0x0
000043 0000
000044 0010      	.DB  0x0,0x0,0x10,0x0
                 
                 __GLOBAL_INI_TBL:
000045 000a      	.DW  0x0A
000046 0004      	.DW  0x04
000047 0068      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
000048 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000049 94f8      	CLI
00004a 27ee      	CLR  R30
00004b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004c e0f1      	LDI  R31,1
00004d bffb      	OUT  GICR,R31
00004e bfeb      	OUT  GICR,R30
00004f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000050 e08d      	LDI  R24,(14-2)+1
000051 e0a2      	LDI  R26,2
000052 27bb      	CLR  R27
                 __CLEAR_REG:
000053 93ed      	ST   X+,R30
000054 958a      	DEC  R24
000055 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000056 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000057 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000058 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000059 93ed      	ST   X+,R30
00005a 9701      	SBIW R24,1
00005b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005c e8ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005e 9185      	LPM  R24,Z+
00005f 9195      	LPM  R25,Z+
000060 9700      	SBIW R24,0
000061 f061      	BREQ __GLOBAL_INI_END
000062 91a5      	LPM  R26,Z+
000063 91b5      	LPM  R27,Z+
000064 9005      	LPM  R0,Z+
000065 9015      	LPM  R1,Z+
000066 01bf      	MOVW R22,R30
000067 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000068 9005      	LPM  R0,Z+
000069 920d      	ST   X+,R0
00006a 9701      	SBIW R24,1
00006b f7e1      	BRNE __GLOBAL_INI_LOOP
00006c 01fb      	MOVW R30,R22
00006d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006f bfed      	OUT  SPL,R30
000070 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000071 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000072 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000073 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000074 940c 00a5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;int LCD_ref=0x01, i=0, digit[2];
                 ;int row = 0, col =-1, pos = -1;
                 ;#define col0    PINA.0
                 ;#define col1    PINA.1
                 ;#define col2    PINA.2
                 ;#define col3    PINA.3
                 ;
                 ;    const int segments[] =
                 ;     {
                 ;        // 0bGFEDCBA
                 ;        0x40, // 0
                 ;        0x79, // 1
                 ;        0x24, // 2
                 ;        0x30, // 3
                 ;        0x19, // 4
                 ;        0x12, // 5
                 ;        0x02, // 6
                 ;        0x78, // 7
                 ;        0x00, // 8
                 ;        0x10 // 9
                 ;    };
                 ;
                 ;char ref[]= {0xF7,0xF6,0xFB,0xF7};
                 
                 	.DSEG
                 ;
                 ;// Function prototypes
                 ;void display_on_seven_segment(int number);
                 ;char read_keypad();
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0021 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000076 93aa      	ST   -Y,R26
000077 93ba      	ST   -Y,R27
000078 93ea      	ST   -Y,R30
000079 93fa      	ST   -Y,R31
00007a b7ef      	IN   R30,SREG
00007b 93ea      	ST   -Y,R30
                 ; 0000 0022  //Place your code here
                 ; 0000 0023 
                 ; 0000 0024     PORTD = LCD_ref;
00007c ba42      	OUT  0x12,R4
                 ; 0000 0025     PORTC = ~(segments[digit[i]]);
00007d 01f3      	MOVW R30,R6
00007e e6a0      	LDI  R26,LOW(_digit)
00007f e0b2      	LDI  R27,HIGH(_digit)
000080 0fee      	LSL  R30
000081 1fff      	ROL  R31
000082 0fae      	ADD  R26,R30
000083 1fbf      	ADC  R27,R31
000084 940e 016e 	CALL __GETW1P
000086 e5a4      	LDI  R26,LOW(_segments*2)
000087 e0b0      	LDI  R27,HIGH(_segments*2)
000088 0fee      	LSL  R30
000089 1fff      	ROL  R31
00008a 0fea      	ADD  R30,R26
00008b 1ffb      	ADC  R31,R27
00008c 91e4      	LPM  R30,Z
00008d 95e0      	COM  R30
00008e bbe5      	OUT  0x15,R30
                 ; 0000 0026     LCD_ref = LCD_ref<<1;
00008f 0c44      	LSL  R4
000090 1c55      	ROL  R5
                 ; 0000 0027     i++;
000091 01f3      	MOVW R30,R6
000092 9631      	ADIW R30,1
000093 013f      	MOVW R6,R30
                 ; 0000 0028 
                 ; 0000 0029     if (i == 4)
000094 e0e4      	LDI  R30,LOW(4)
000095 e0f0      	LDI  R31,HIGH(4)
000096 15e6      	CP   R30,R6
000097 05f7      	CPC  R31,R7
000098 f429      	BRNE _0x4
                 ; 0000 002A     {
                 ; 0000 002B         i = 0;
000099 2466      	CLR  R6
00009a 2477      	CLR  R7
                 ; 0000 002C         LCD_ref = 0x01;
00009b e0e1      	LDI  R30,LOW(1)
00009c e0f0      	LDI  R31,HIGH(1)
00009d 012f      	MOVW R4,R30
                 ; 0000 002D     }
                 ; 0000 002E 
                 ; 0000 002F }
                 _0x4:
00009e 91e9      	LD   R30,Y+
00009f bfef      	OUT  SREG,R30
0000a0 91f9      	LD   R31,Y+
0000a1 91e9      	LD   R30,Y+
0000a2 91b9      	LD   R27,Y+
0000a3 91a9      	LD   R26,Y+
0000a4 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0032 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0033 // Declare your local variables here
                 ; 0000 0034 //  int minutes = 0,seconds = 0;
                 ; 0000 0035 
                 ; 0000 0036     // Initialize ports and pins
                 ; 0000 0037     // Configure SEVENSEG_PORT, KEYPAD_PORT, BUZZER_PORT, and LED_PORT as required
                 ; 0000 0038 
                 ; 0000 0039     // Set ROWS as outputs and COLS as inputs
                 ; 0000 003A //    DDRB = 0xFF; // Assuming keypad is connected to PORTB pins 0-3 as COLS
                 ; 0000 003B //    PORTB = 0x00; // Activate internal pull-ups on PORTB pins 0-3 as COLS
                 ; 0000 003C      DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
0000a5 e0ef      	LDI  R30,LOW(15)
0000a6 bbea      	OUT  0x1A,R30
                 ; 0000 003D      PORTA=(1<<PORTA7) | (1<<PORTA6) |(1<<PORTA5) |(1<<PORTA4) |(0<<PORTA3) |(0<<PORTA2) |(0<<PORTA1) | (0<<PORTA7);
0000a7 efe0      	LDI  R30,LOW(240)
0000a8 bbeb      	OUT  0x1B,R30
                 ; 0000 003E      DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
0000a9 efef      	LDI  R30,LOW(255)
0000aa bbe4      	OUT  0x14,R30
                 ; 0000 003F      DDRD = 0xFF; // Assuming LEDs are connected to PORTD
0000ab bbe1      	OUT  0x11,R30
                 ; 0000 0040 
                 ; 0000 0041 // Timer/Counter 0 initialization
                 ; 0000 0042 // Clock source: System Clock
                 ; 0000 0043 // Clock value: 7.813 kHz
                 ; 0000 0044 // Mode: CTC top=OCR0
                 ; 0000 0045 // OC0 output: Disconnected
                 ; 0000 0046 // Timer Period: 9.984 ms
                 ; 0000 0047 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000ac e0ed      	LDI  R30,LOW(13)
0000ad bfe3      	OUT  0x33,R30
                 ; 0000 0048 TCNT0=0x00;
0000ae e0e0      	LDI  R30,LOW(0)
0000af bfe2      	OUT  0x32,R30
                 ; 0000 0049 OCR0=0x4D;
0000b0 e4ed      	LDI  R30,LOW(77)
0000b1 bfec      	OUT  0x3C,R30
                 ; 0000 004A 
                 ; 0000 004B // Timer/Counter 1 initialization
                 ; 0000 004C // Clock source: System Clock
                 ; 0000 004D // Clock value: 31.250 kHz
                 ; 0000 004E // Mode: CTC top=OCR1A
                 ; 0000 004F // OC1A output: Disconnected
                 ; 0000 0050 // OC1B output: Disconnected
                 ; 0000 0051 // Noise Canceler: Off
                 ; 0000 0052 // Input Capture on Falling Edge
                 ; 0000 0053 // Timer Period: 1 s
                 ; 0000 0054 // Timer1 Overflow Interrupt: Off
                 ; 0000 0055 // Input Capture Interrupt: Off
                 ; 0000 0056 // Compare A Match Interrupt: On
                 ; 0000 0057 // Compare B Match Interrupt: On
                 ; 0000 0058 //TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
                 ; 0000 0059 //TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
                 ; 0000 005A //TCNT1H=0x00;
                 ; 0000 005B //TCNT1L=0x00;
                 ; 0000 005C //ICR1H=0x00;
                 ; 0000 005D //ICR1L=0x00;
                 ; 0000 005E //OCR1AH=0x7A;
                 ; 0000 005F //OCR1AL=0x11;
                 ; 0000 0060 //OCR1BH=0x00;
                 ; 0000 0061 //OCR1BL=0x00;
                 ; 0000 0062 //
                 ; 0000 0063 //
                 ; 0000 0064 //// Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0065 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000b2 e1ea      	LDI  R30,LOW(26)
0000b3 bfe9      	OUT  0x39,R30
                 ; 0000 0066 
                 ; 0000 0067 
                 ; 0000 0068  // Read minutes input from keypad
                 ; 0000 0069 // Global enable interrupts
                 ; 0000 006A #asm("sei")
0000b4 9478      	sei
                 ; 0000 006B while (1)
                 _0x5:
                 ; 0000 006C       {
                 ; 0000 006D       // Place your code here
                 ; 0000 006E       char key = read_keypad();
                 ; 0000 006F       if(key != 16)
0000b5 9721      	SBIW R28,1
                 ;	key -> Y+0
0000b6 d02d      	RCALL _read_keypad
0000b7 83e8      	ST   Y,R30
0000b8 81a8      	LD   R26,Y
0000b9 31a0      	CPI  R26,LOW(0x10)
0000ba f011      	BREQ _0x8
                 ; 0000 0070       display_on_seven_segment(key);
0000bb 27bb      	CLR  R27
0000bc d003      	RCALL _display_on_seven_segment
                 ; 0000 0071 
                 ; 0000 0072       }
                 _0x8:
0000bd 9621      	ADIW R28,1
0000be cff6      	RJMP _0x5
                 ; 0000 0073 }
                 _0x9:
0000bf cfff      	RJMP _0x9
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void display_on_seven_segment(int number) {
                 ; 0000 0078 void display_on_seven_segment(int number) {
                 _display_on_seven_segment:
                 ; .FSTART _display_on_seven_segment
                 ; 0000 0079 
                 ; 0000 007A     // Display the given number on the seven segment display
                 ; 0000 007B     int i;
                 ; 0000 007C     const int segments[] =
                 ; 0000 007D      {
                 ; 0000 007E         // 0bGFEDCBA
                 ; 0000 007F         0x40, // 0
                 ; 0000 0080         0x79, // 1
                 ; 0000 0081         0x24, // 2
                 ; 0000 0082         0x30, // 3
                 ; 0000 0083         0x19, // 4
                 ; 0000 0084         0x12, // 5
                 ; 0000 0085         0x02, // 6
                 ; 0000 0086         0x78, // 7
                 ; 0000 0087         0x00, // 8
                 ; 0000 0088         0x10 // 9
                 ; 0000 0089     };
                 ; 0000 008A 
                 ; 0000 008B 
                 ; 0000 008C 
                 ; 0000 008D     // Extract digits from the number
                 ; 0000 008E      digit[1] = number / 10;
0000c0 93ba      	ST   -Y,R27
0000c1 93aa      	ST   -Y,R26
0000c2 9764      	SBIW R28,20
0000c3 e184      	LDI  R24,20
0000c4 e0a0      	LDI  R26,LOW(0)
0000c5 e0b0      	LDI  R27,HIGH(0)
0000c6 e7e6      	LDI  R30,LOW(_0xA*2)
0000c7 e0f0      	LDI  R31,HIGH(_0xA*2)
0000c8 940e 0172 	CALL __INITLOCB
0000ca 931a      	ST   -Y,R17
0000cb 930a      	ST   -Y,R16
                 ;	number -> Y+22
                 ;	i -> R16,R17
                 ;	segments -> Y+2
0000cc 89ae      	LDD  R26,Y+22
0000cd 89bf      	LDD  R27,Y+22+1
0000ce e0ea      	LDI  R30,LOW(10)
0000cf e0f0      	LDI  R31,HIGH(10)
0000d0 940e 014d 	CALL __DIVW21
                +
0000d2 93e0 0262+STS _digit + ( 2 ) , R30
0000d4 93f0 0263+STS _digit + ( 2 ) + 1 , R31
                 	__PUTW1MN _digit,2
                 ; 0000 008F      digit[2] = number % 10;
0000d6 89ae      	LDD  R26,Y+22
0000d7 89bf      	LDD  R27,Y+22+1
0000d8 e0ea      	LDI  R30,LOW(10)
0000d9 e0f0      	LDI  R31,HIGH(10)
0000da 940e 0152 	CALL __MODW21
                +
0000dc 93e0 0264+STS _digit + ( 4 ) , R30
0000de 93f0 0265+STS _digit + ( 4 ) + 1 , R31
                 	__PUTW1MN _digit,4
                 ; 0000 0090      //PORTC = ~(segments[digit[i]]);
                 ; 0000 0091 
                 ; 0000 0092 }
0000e0 8119      	LDD  R17,Y+1
0000e1 8108      	LDD  R16,Y+0
0000e2 9668      	ADIW R28,24
0000e3 9508      	RET
                 ; .FEND
                 ;
                 ;//
                 ;//        char keypad_layout[4][4] = {
                 ;//            {'x', '6', '5', '4'},
                 ;//            {'-', '3', '2', '1'},
                 ;//            {'+', '=', '0', 'c'}
                 ;//        };
                 ;//
                 ;
                 ;    char read_keypad() {
                 ; 0000 009C char read_keypad() {
                 _read_keypad:
                 ; .FSTART _read_keypad
                 ; 0000 009D 
                 ; 0000 009E    // Loop through each ROW and check for key press
                 ; 0000 009F 
                 ; 0000 00A0     PORTA.0=0;PORTA.1=1;PORTA.2=1;PORTA.3=1;
0000e4 98d8      	CBI  0x1B,0
0000e5 9ad9      	SBI  0x1B,1
0000e6 9ada      	SBI  0x1B,2
0000e7 9adb      	SBI  0x1B,3
                 ; 0000 00A1     if(!PINA.4) return 0;
0000e8 99cc      	SBIC 0x19,4
0000e9 c002      	RJMP _0x13
0000ea e0e0      	LDI  R30,LOW(0)
0000eb 9508      	RET
                 ; 0000 00A2     if(!PINA.5) return 1;
                 _0x13:
0000ec 99cd      	SBIC 0x19,5
0000ed c002      	RJMP _0x14
0000ee e0e1      	LDI  R30,LOW(1)
0000ef 9508      	RET
                 ; 0000 00A3     if(!PINA.6) return 2;
                 _0x14:
0000f0 99ce      	SBIC 0x19,6
0000f1 c002      	RJMP _0x15
0000f2 e0e2      	LDI  R30,LOW(2)
0000f3 9508      	RET
                 ; 0000 00A4     if(!PINA.7) return 3;
                 _0x15:
0000f4 99cf      	SBIC 0x19,7
0000f5 c002      	RJMP _0x16
0000f6 e0e3      	LDI  R30,LOW(3)
0000f7 9508      	RET
                 ; 0000 00A5     PORTA.0=1;PORTA.1=0;PORTA.2=1;PORTA.3=1;
                 _0x16:
0000f8 9ad8      	SBI  0x1B,0
0000f9 98d9      	CBI  0x1B,1
0000fa 9ada      	SBI  0x1B,2
0000fb 9adb      	SBI  0x1B,3
                 ; 0000 00A6     if(!PINA.4) return 4;
0000fc 99cc      	SBIC 0x19,4
0000fd c002      	RJMP _0x1F
0000fe e0e4      	LDI  R30,LOW(4)
0000ff 9508      	RET
                 ; 0000 00A7     if(!PINA.5) return 5;
                 _0x1F:
000100 99cd      	SBIC 0x19,5
000101 c002      	RJMP _0x20
000102 e0e5      	LDI  R30,LOW(5)
000103 9508      	RET
                 ; 0000 00A8     if(!PINA.6) return 6;
                 _0x20:
000104 99ce      	SBIC 0x19,6
000105 c002      	RJMP _0x21
000106 e0e6      	LDI  R30,LOW(6)
000107 9508      	RET
                 ; 0000 00A9     if(!PINA.7) return 7;
                 _0x21:
000108 99cf      	SBIC 0x19,7
000109 c002      	RJMP _0x22
00010a e0e7      	LDI  R30,LOW(7)
00010b 9508      	RET
                 ; 0000 00AA     PORTA.0=1;PORTA.1=1;PORTA.2=0;PORTA.3=1;
                 _0x22:
00010c 9ad8      	SBI  0x1B,0
00010d 9ad9      	SBI  0x1B,1
00010e 98da      	CBI  0x1B,2
00010f 9adb      	SBI  0x1B,3
                 ; 0000 00AB     if(!PINA.4) return 8;
000110 99cc      	SBIC 0x19,4
000111 c002      	RJMP _0x2B
000112 e0e8      	LDI  R30,LOW(8)
000113 9508      	RET
                 ; 0000 00AC     if(!PINA.5) return 9;
                 _0x2B:
000114 99cd      	SBIC 0x19,5
000115 c002      	RJMP _0x2C
000116 e0e9      	LDI  R30,LOW(9)
000117 9508      	RET
                 ; 0000 00AD     if(!PINA.6) return 10;
                 _0x2C:
000118 99ce      	SBIC 0x19,6
000119 c002      	RJMP _0x2D
00011a e0ea      	LDI  R30,LOW(10)
00011b 9508      	RET
                 ; 0000 00AE     if(!PINA.7) return 11;
                 _0x2D:
00011c 99cf      	SBIC 0x19,7
00011d c002      	RJMP _0x2E
00011e e0eb      	LDI  R30,LOW(11)
00011f 9508      	RET
                 ; 0000 00AF     PORTA.0=1;PORTA.1=1;PORTA.2=1;PORTA.3=0;
                 _0x2E:
000120 9ad8      	SBI  0x1B,0
000121 9ad9      	SBI  0x1B,1
000122 9ada      	SBI  0x1B,2
000123 98db      	CBI  0x1B,3
                 ; 0000 00B0     if(!PINA.4) return 12;
000124 99cc      	SBIC 0x19,4
000125 c002      	RJMP _0x37
000126 e0ec      	LDI  R30,LOW(12)
000127 9508      	RET
                 ; 0000 00B1     if(!PINA.5) return 13;
                 _0x37:
000128 99cd      	SBIC 0x19,5
000129 c002      	RJMP _0x38
00012a e0ed      	LDI  R30,LOW(13)
00012b 9508      	RET
                 ; 0000 00B2     if(!PINA.6) return 14;
                 _0x38:
00012c 99ce      	SBIC 0x19,6
00012d c002      	RJMP _0x39
00012e e0ee      	LDI  R30,LOW(14)
00012f 9508      	RET
                 ; 0000 00B3     if(!PINA.7) return 15;
                 _0x39:
000130 99cf      	SBIC 0x19,7
000131 c002      	RJMP _0x3A
000132 e0ef      	LDI  R30,LOW(15)
000133 9508      	RET
                 ; 0000 00B4     return 16;
                 _0x3A:
000134 e1e0      	LDI  R30,LOW(16)
000135 9508      	RET
                 ; 0000 00B5 
                 ; 0000 00B6         }
                 ; .FEND
                 ;
                 ;
                 ;
                 
                 	.DSEG
                 _digit:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 __ANEGW1:
000136 95f1      	NEG  R31
000137 95e1      	NEG  R30
000138 40f0      	SBCI R31,0
000139 9508      	RET
                 
                 __DIVW21U:
00013a 2400      	CLR  R0
00013b 2411      	CLR  R1
00013c e190      	LDI  R25,16
                 __DIVW21U1:
00013d 0faa      	LSL  R26
00013e 1fbb      	ROL  R27
00013f 1c00      	ROL  R0
000140 1c11      	ROL  R1
000141 1a0e      	SUB  R0,R30
000142 0a1f      	SBC  R1,R31
000143 f418      	BRCC __DIVW21U2
000144 0e0e      	ADD  R0,R30
000145 1e1f      	ADC  R1,R31
000146 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000147 60a1      	SBR  R26,1
                 __DIVW21U3:
000148 959a      	DEC  R25
000149 f799      	BRNE __DIVW21U1
00014a 01fd      	MOVW R30,R26
00014b 01d0      	MOVW R26,R0
00014c 9508      	RET
                 
                 __DIVW21:
00014d d012      	RCALL __CHKSIGNW
00014e dfeb      	RCALL __DIVW21U
00014f f40e      	BRTC __DIVW211
000150 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000151 9508      	RET
                 
                 __MODW21:
000152 94e8      	CLT
000153 ffb7      	SBRS R27,7
000154 c004      	RJMP __MODW211
000155 95a0      	COM  R26
000156 95b0      	COM  R27
000157 9611      	ADIW R26,1
000158 9468      	SET
                 __MODW211:
000159 fdf7      	SBRC R31,7
00015a dfdb      	RCALL __ANEGW1
00015b dfde      	RCALL __DIVW21U
00015c 01fd      	MOVW R30,R26
00015d f40e      	BRTC __MODW212
00015e dfd7      	RCALL __ANEGW1
                 __MODW212:
00015f 9508      	RET
                 
                 __CHKSIGNW:
000160 94e8      	CLT
000161 fff7      	SBRS R31,7
000162 c002      	RJMP __CHKSW1
000163 dfd2      	RCALL __ANEGW1
000164 9468      	SET
                 __CHKSW1:
000165 ffb7      	SBRS R27,7
000166 c006      	RJMP __CHKSW2
000167 95a0      	COM  R26
000168 95b0      	COM  R27
000169 9611      	ADIW R26,1
00016a f800      	BLD  R0,0
00016b 9403      	INC  R0
00016c fa00      	BST  R0,0
                 __CHKSW2:
00016d 9508      	RET
                 
                 __GETW1P:
00016e 91ed      	LD   R30,X+
00016f 91fc      	LD   R31,X
000170 9711      	SBIW R26,1
000171 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000172 0fac      	ADD  R26,R28
000173 1fbd      	ADC  R27,R29
                 __INITLOC0:
000174 9005      	LPM  R0,Z+
000175 920d      	ST   X+,R0
000176 958a      	DEC  R24
000177 f7e1      	BRNE __INITLOC0
000178 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  14 r1 :   5 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   5 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   2 r17:   2 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   4 r26:  26 r27:  19 r28:   6 r29:   2 r30:  79 r31:  24 
x  :   6 y  :  22 z  :   9 
Registers used: 20 out of 35 (57.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   4 
adiw  :   5 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   4 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   5 
cp    :   1 cpc   :   1 cpi   :   1 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  22 ld    :   8 ldd   :   6 ldi   :  54 
lds   :   0 lpm   :  10 lsl   :   4 lsr   :   0 mov   :   0 movw  :  10 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  17 pop   :   0 push  :   0 rcall :   9 ret   :  25 
reti  :   1 rjmp  :  23 rol   :   6 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  12 sbic  :  16 sbis  :   0 sbiw  :   6 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  14 std   :   0 sts   :   4 sub   :   1 subi  :   0 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 48 out of 116 (41.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002f2    692     62    754   32768   2.3%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
