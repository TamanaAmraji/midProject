
AVRASM ver. 2.1.30  C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm Fri Jun 14 05:30:41 2024

C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _LCD_ref=R4
                 	.DEF _LCD_ref_msb=R5
                 	.DEF _i=R6
                 	.DEF _i_msb=R7
                 	.DEF _digit1=R9
                 	.DEF _digit2=R8
                 	.DEF _key=R11
                 	.DEF _minutes=R12
                 	.DEF _minutes_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0049 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 009c 	JMP  _timer1_compa_isr
000010 940c 00ab 	JMP  _timer1_compb_isr
000012 940c 0000 	JMP  0x00
000014 940c 0076 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _segments:
00002a 0040
00002b 0079
00002c 0024
00002d 0030      	.DB  0x40,0x0,0x79,0x0,0x24,0x0,0x30,0x0
00002e 0019
00002f 0012
000030 0002
000031 0078      	.DB  0x19,0x0,0x12,0x0,0x2,0x0,0x78,0x0
000032 0000
000033 0010      	.DB  0x0,0x0,0x10,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0001
000035 0000      	.DB  0x1,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
000038 0000      	.DB  0x0,0x0
                 
                 _0x3:
C:\Users\Tamana\OneDrive\Documents\GitHub\midProject\CodeVision\Debug\List\Mid.asm(1139): warning: .cseg .db misalignment - padding zero byte
000039 0032      	.DB  0x32
                 _0x4:
00003a 3837
00003b 2f39
00003c 3534
00003d 7836      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x78
00003e 3231
00003f 2d33
000040 3063
000041 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x63,0x30,0x3D,0x2B
                 
                 __GLOBAL_INI_TBL:
000042 000a      	.DW  0x0A
000043 0004      	.DW  0x04
000044 0068      	.DW  __REG_VARS*2
                 
000045 0010      	.DW  0x10
000046 026c      	.DW  _keys
000047 0074      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000048 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000049 94f8      	CLI
00004a 27ee      	CLR  R30
00004b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004c e0f1      	LDI  R31,1
00004d bffb      	OUT  GICR,R31
00004e bfeb      	OUT  GICR,R30
00004f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000050 e08d      	LDI  R24,(14-2)+1
000051 e0a2      	LDI  R26,2
000052 27bb      	CLR  R27
                 __CLEAR_REG:
000053 93ed      	ST   X+,R30
000054 958a      	DEC  R24
000055 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000056 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000057 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000058 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000059 93ed      	ST   X+,R30
00005a 9701      	SBIW R24,1
00005b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005c e8e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005e 9185      	LPM  R24,Z+
00005f 9195      	LPM  R25,Z+
000060 9700      	SBIW R24,0
000061 f061      	BREQ __GLOBAL_INI_END
000062 91a5      	LPM  R26,Z+
000063 91b5      	LPM  R27,Z+
000064 9005      	LPM  R0,Z+
000065 9015      	LPM  R1,Z+
000066 01bf      	MOVW R22,R30
000067 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000068 9005      	LPM  R0,Z+
000069 920d      	ST   X+,R0
00006a 9701      	SBIW R24,1
00006b f7e1      	BRNE __GLOBAL_INI_LOOP
00006c 01fb      	MOVW R30,R22
00006d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006f bfed      	OUT  SPL,R30
000070 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000071 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000072 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000073 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000074 940c 00ac 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Declare your global variables here
                 ;int LCD_ref=0x01, i=0, digit[4];
                 ;unsigned char digit1=0,digit2= 0, key;
                 ;   int minutes = 0,seconds = 0, test=50,remaining_seconds;
                 
                 	.DSEG
                 ;   int remaining_seconds;
                 ;#define col0    PINA.0
                 ;#define col1    PINA.1
                 ;#define col2    PINA.2
                 ;#define col3    PINA.3
                 ;
                 ;    const int segments[] =
                 ;     {
                 ;        // 0bGFEDCBA
                 ;        0x40, // 0
                 ;        0x79, // 1
                 ;        0x24, // 2
                 ;        0x30, // 3
                 ;        0x19, // 4
                 ;        0x12, // 5
                 ;        0x02, // 6
                 ;        0x78, // 7
                 ;        0x00, // 8
                 ;        0x10 // 9
                 ;    };
                 ;
                 ;    char keys[]= {                      //based on keypad model we use
                 ;              '7', '8', '9', '/',
                 ;              '4', '5', '6', 'x',
                 ;              '1', '2', '3', '-',
                 ;              'c', '0', '=', '+'
                 ;              };
                 ;
                 ;//char ref[]= {0xF7,0xF6,0xFB,0xF7};
                 ;
                 ;// Function prototypes
                 ;void display_on_seven_segment_minute(char minute);
                 ;void display_on_seven_segment_second(char second);
                 ;char read_keypad();
                 ;int getval(char key);
                 ;void blink_segment_minute(char mode);
                 ;void countdown_timer(int minutes, int seconds, char key);
                 ;void LightDancer();
                 ;
                 ;
                 ;
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0031 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000076 d13a      	RCALL SUBOPT_0x0
                 ; 0000 0032  //Place your code here
                 ; 0000 0033 
                 ; 0000 0034     PORTD = ~(LCD_ref);
000077 2de4      	MOV  R30,R4
000078 95e0      	COM  R30
000079 bbe2      	OUT  0x12,R30
                 ; 0000 0035     PORTC = ~(segments[digit[i]]);
00007a 01f3      	MOVW R30,R6
00007b e6a0      	LDI  R26,LOW(_digit)
00007c e0b2      	LDI  R27,HIGH(_digit)
00007d 0fee      	LSL  R30
00007e 1fff      	ROL  R31
00007f 0fae      	ADD  R26,R30
000080 1fbf      	ADC  R27,R31
000081 940e 01c2 	CALL __GETW1P
000083 e5a4      	LDI  R26,LOW(_segments*2)
000084 e0b0      	LDI  R27,HIGH(_segments*2)
000085 0fee      	LSL  R30
000086 1fff      	ROL  R31
000087 0fea      	ADD  R30,R26
000088 1ffb      	ADC  R31,R27
000089 91e4      	LPM  R30,Z
00008a 95e0      	COM  R30
00008b bbe5      	OUT  0x15,R30
                 ; 0000 0036     LCD_ref = LCD_ref<<1;
00008c 0c44      	LSL  R4
00008d 1c55      	ROL  R5
                 ; 0000 0037     i++;
00008e 01f3      	MOVW R30,R6
00008f 9631      	ADIW R30,1
000090 013f      	MOVW R6,R30
                 ; 0000 0038     if (i == 4)
000091 e0e4      	LDI  R30,LOW(4)
000092 e0f0      	LDI  R31,HIGH(4)
000093 15e6      	CP   R30,R6
000094 05f7      	CPC  R31,R7
000095 f429      	BRNE _0x5
                 ; 0000 0039     {
                 ; 0000 003A         i = 0;
000096 2466      	CLR  R6
000097 2477      	CLR  R7
                 ; 0000 003B         LCD_ref = 0x01;
000098 e0e1      	LDI  R30,LOW(1)
000099 e0f0      	LDI  R31,HIGH(1)
00009a 012f      	MOVW R4,R30
                 ; 0000 003C     }
                 ; 0000 003D 
                 ; 0000 003E }
                 _0x5:
00009b c008      	RJMP _0x53
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0041 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
00009c d114      	RCALL SUBOPT_0x0
                 ; 0000 0042     remaining_seconds--;
00009d e6aa      	LDI  R26,LOW(_remaining_seconds)
00009e e0b2      	LDI  R27,HIGH(_remaining_seconds)
00009f 91ed      	LD   R30,X+
0000a0 91fd      	LD   R31,X+
0000a1 9731      	SBIW R30,1
0000a2 93fe      	ST   -X,R31
0000a3 93ee      	ST   -X,R30
                 ; 0000 0043 }
                 _0x53:
0000a4 91e9      	LD   R30,Y+
0000a5 bfef      	OUT  SREG,R30
0000a6 91f9      	LD   R31,Y+
0000a7 91e9      	LD   R30,Y+
0000a8 91b9      	LD   R27,Y+
0000a9 91a9      	LD   R26,Y+
0000aa 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
                 ; 0000 0046 {
                 _timer1_compb_isr:
                 ; .FSTART _timer1_compb_isr
                 ; 0000 0047 
                 ; 0000 0048 }
0000ab 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 004B {
                 _main:
                 ; .FSTART _main
                 ; 0000 004C // Declare your local variables here
                 ; 0000 004D     // Initialize ports and pins
                 ; 0000 004E     // Configure SEVENSEG_PORT, KEYPAD_PORT, BUZZER_PORT, and LED_PORT as required
                 ; 0000 004F 
                 ; 0000 0050     // Set ROWS as outputs and COLS as inputs
                 ; 0000 0051      DDRB = 0xFF; // Assuming keypad is connected to PORTB pins 0-3 as COLS
0000ac efef      	LDI  R30,LOW(255)
0000ad bbe7      	OUT  0x17,R30
                 ; 0000 0052 //    PORTB = 0x00; // Activate internal pull-ups on PORTB pins 0-3 as COLS
                 ; 0000 0053      DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
0000ae e0ef      	LDI  R30,LOW(15)
0000af bbea      	OUT  0x1A,R30
                 ; 0000 0054      PORTA=(1<<PORTA7) | (1<<PORTA6) |(1<<PORTA5) |(1<<PORTA4) |(0<<PORTA3) |(0<<PORTA2) |(0<<PORTA1) | (0<<PORTA7);
0000b0 efe0      	LDI  R30,LOW(240)
0000b1 bbeb      	OUT  0x1B,R30
                 ; 0000 0055      DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
0000b2 efef      	LDI  R30,LOW(255)
0000b3 bbe4      	OUT  0x14,R30
                 ; 0000 0056      DDRD = 0xFF; // Assuming LEDs are connected to PORTD
0000b4 bbe1      	OUT  0x11,R30
                 ; 0000 0057 
                 ; 0000 0058 // Timer/Counter 0 initialization
                 ; 0000 0059 // Clock source: System Clock
                 ; 0000 005A // Clock value: 7.813 kHz
                 ; 0000 005B // Mode: CTC top=OCR0
                 ; 0000 005C // OC0 output: Disconnected
                 ; 0000 005D // Timer Period: 9.984 ms
                 ; 0000 005E TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000b5 e0ed      	LDI  R30,LOW(13)
0000b6 bfe3      	OUT  0x33,R30
                 ; 0000 005F TCNT0=0x00;
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bfe2      	OUT  0x32,R30
                 ; 0000 0060 OCR0=0x4D;
0000b9 e4ed      	LDI  R30,LOW(77)
0000ba bfec      	OUT  0x3C,R30
                 ; 0000 0061 
                 ; 0000 0062 // Timer/Counter 1 initialization
                 ; 0000 0063 // Clock source: System Clock
                 ; 0000 0064 // Clock value: 31.250 kHz
                 ; 0000 0065 // Mode: CTC top=OCR1A
                 ; 0000 0066 // OC1A output: Disconnected
                 ; 0000 0067 // OC1B output: Disconnected
                 ; 0000 0068 // Noise Canceler: Off
                 ; 0000 0069 // Input Capture on Falling Edge
                 ; 0000 006A // Timer Period: 1 s
                 ; 0000 006B // Timer1 Overflow Interrupt: Off
                 ; 0000 006C // Input Capture Interrupt: Off
                 ; 0000 006D // Compare A Match Interrupt: On
                 ; 0000 006E // Compare B Match Interrupt: On
                 ; 0000 006F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000bb e0e0      	LDI  R30,LOW(0)
0000bc bdef      	OUT  0x2F,R30
                 ; 0000 0070 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0000bd e0ec      	LDI  R30,LOW(12)
0000be bdee      	OUT  0x2E,R30
                 ; 0000 0071 TCNT1H=0x00;
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 bded      	OUT  0x2D,R30
                 ; 0000 0072 TCNT1L=0x00;
0000c1 bdec      	OUT  0x2C,R30
                 ; 0000 0073 ICR1H=0x00;
0000c2 bde7      	OUT  0x27,R30
                 ; 0000 0074 ICR1L=0x00;
0000c3 bde6      	OUT  0x26,R30
                 ; 0000 0075 OCR1AH=0x7A;
0000c4 e7ea      	LDI  R30,LOW(122)
0000c5 bdeb      	OUT  0x2B,R30
                 ; 0000 0076 OCR1AL=0x11;
0000c6 e1e1      	LDI  R30,LOW(17)
0000c7 bdea      	OUT  0x2A,R30
                 ; 0000 0077 OCR1BH=0x00;
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 bde9      	OUT  0x29,R30
                 ; 0000 0078 OCR1BL=0x00;
0000ca bde8      	OUT  0x28,R30
                 ; 0000 0079 //
                 ; 0000 007A //// Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 007B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000cb e1ea      	LDI  R30,LOW(26)
0000cc bfe9      	OUT  0x39,R30
                 ; 0000 007C 
                 ; 0000 007D 
                 ; 0000 007E  // Read minutes input from keypad
                 ; 0000 007F // Global enable interrupts
                 ; 0000 0080 #asm("sei")
0000cd 9478      	sei
                 ; 0000 0081 while (1)
                 _0x6:
                 ; 0000 0082       {
                 ; 0000 0083       // Place your code here
                 ; 0000 0084        key = read_keypad();
0000ce d014      	RCALL _read_keypad
0000cf 2ebe      	MOV  R11,R30
                 ; 0000 0085        getval(key);
0000d0 2dab      	MOV  R26,R11
0000d1 d073      	RCALL _getval
                 ; 0000 0086        countdown_timer( minutes, 50,key);
0000d2 92da      	ST   -Y,R13
0000d3 92ca      	ST   -Y,R12
0000d4 e3e2      	LDI  R30,LOW(50)
0000d5 e0f0      	LDI  R31,HIGH(50)
0000d6 93fa      	ST   -Y,R31
0000d7 93ea      	ST   -Y,R30
0000d8 2dab      	MOV  R26,R11
0000d9 d002      	RCALL _countdown_timer
                 ; 0000 0087       // display_on_seven_segment_second(seconds);
                 ; 0000 0088 
                 ; 0000 0089 //       blink_segment(1);
                 ; 0000 008A 
                 ; 0000 008B     }
0000da cff3      	RJMP _0x6
                 ; 0000 008C }
                 _0x9:
0000db cfff      	RJMP _0x9
                 ; .FEND
                 ;
                 ;
                 ;void blink_segment(char mode)
                 ; 0000 0090 {
                 ; 0000 0091  switch (mode)
                 ;	mode -> Y+0
                 ; 0000 0092  {
                 ; 0000 0093  //PORTC = 0xFE;
                 ; 0000 0094   case 1:
                 ; 0000 0095   PORTC = ~(segments[digit[i]]);
                 ; 0000 0096   case 2:
                 ; 0000 0097   PIND.1=0;
                 ; 0000 0098 
                 ; 0000 0099  }
                 ; 0000 009A }
                 ;
                 ;
                 ;
                 ;void countdown_timer(int minutes, int seconds, char key) {
                 ; 0000 009E void countdown_timer(int minutes, int seconds, char key) {
                 _countdown_timer:
                 ; .FSTART _countdown_timer
                 ; 0000 009F //remaining_seconds= seconds;
                 ; 0000 00A0     // Countdown from the given minutes and seconds
                 ; 0000 00A1     if (key == 'c')
0000dc 93aa      	ST   -Y,R26
                 ;	minutes -> Y+3
                 ;	seconds -> Y+1
                 ;	key -> Y+0
0000dd 81a8      	LD   R26,Y
0000de 36a3      	CPI  R26,LOW(0x63)
0000df f409      	BRNE _0x12
                 ; 0000 00A2     {
                 ; 0000 00A3     // display_on_seven_segment_second(20);
                 ; 0000 00A4         LightDancer();
0000e0 d095      	RCALL _LightDancer
                 ; 0000 00A5        // TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
                 ; 0000 00A6     }
                 ; 0000 00A7 
                 ; 0000 00A8 
                 ; 0000 00A9     // Calculate total seconds
                 ; 0000 00AA //    if (minutes<= 0)
                 ; 0000 00AB //    {
                 ; 0000 00AC //     LightDancer();
                 ; 0000 00AD //    }
                 ; 0000 00AE     //else{
                 ; 0000 00AF 
                 ; 0000 00B0 
                 ; 0000 00B1     //}
                 ; 0000 00B2 }
                 _0x12:
0000e1 9625      	ADIW R28,5
0000e2 9508      	RET
                 ; .FEND
                 ;
                 ;void display_on_seven_segment_minute(char minute) {
                 ; 0000 00B4 void display_on_seven_segment_minute(char minute) {
                 ; 0000 00B5 
                 ; 0000 00B6     // Extract digits from the number
                 ; 0000 00B7      digit[0] = minute / 10;
                 ;	minute -> Y+0
                 ; 0000 00B8      digit[1] = minute % 10;
                 ; 0000 00B9 }
                 ;void display_on_seven_segment_second(char second) {
                 ; 0000 00BA void display_on_seven_segment_second(char second) {
                 ; 0000 00BB 
                 ; 0000 00BC     // Extract digits from the number
                 ; 0000 00BD      digit[2] = second / 10;
                 ;	second -> Y+0
                 ; 0000 00BE      digit[3] = second % 10;
                 ; 0000 00BF }
                 ;
                 ;
                 ;    char read_keypad() {
                 ; 0000 00C2 char read_keypad() {
                 _read_keypad:
                 ; .FSTART _read_keypad
                 ; 0000 00C3 
                 ; 0000 00C4    // Loop through each ROW and check for key press
                 ; 0000 00C5     PORTA.0=0;PORTA.1=1;PORTA.2=1;PORTA.3=1;
0000e3 98d8      	CBI  0x1B,0
0000e4 9ad9      	SBI  0x1B,1
0000e5 9ada      	SBI  0x1B,2
0000e6 9adb      	SBI  0x1B,3
                 ; 0000 00C6     if(!PINA.4) return keys[0];
0000e7 99cc      	SBIC 0x19,4
0000e8 c003      	RJMP _0x1B
0000e9 91e0 026c 	LDS  R30,_keys
0000eb 9508      	RET
                 ; 0000 00C7     if(!PINA.5) return keys[1];
                 _0x1B:
0000ec 99cd      	SBIC 0x19,5
0000ed c003      	RJMP _0x1C
                +
0000ee 91e0 026d+LDS R30 , _keys + ( 1 )
                 	__GETB1MN _keys,1
0000f0 9508      	RET
                 ; 0000 00C8     if(!PINA.6) return keys[2];
                 _0x1C:
0000f1 99ce      	SBIC 0x19,6
0000f2 c003      	RJMP _0x1D
                +
0000f3 91e0 026e+LDS R30 , _keys + ( 2 )
                 	__GETB1MN _keys,2
0000f5 9508      	RET
                 ; 0000 00C9     if(!PINA.7) return keys[3];
                 _0x1D:
0000f6 99cf      	SBIC 0x19,7
0000f7 c003      	RJMP _0x1E
                +
0000f8 91e0 026f+LDS R30 , _keys + ( 3 )
                 	__GETB1MN _keys,3
0000fa 9508      	RET
                 ; 0000 00CA     PORTA.0=1;PORTA.1=0;PORTA.2=1;PORTA.3=1;
                 _0x1E:
0000fb 9ad8      	SBI  0x1B,0
0000fc 98d9      	CBI  0x1B,1
0000fd 9ada      	SBI  0x1B,2
0000fe 9adb      	SBI  0x1B,3
                 ; 0000 00CB     if(!PINA.4) return keys[4];
0000ff 99cc      	SBIC 0x19,4
000100 c003      	RJMP _0x27
                +
000101 91e0 0270+LDS R30 , _keys + ( 4 )
                 	__GETB1MN _keys,4
000103 9508      	RET
                 ; 0000 00CC     if(!PINA.5) return keys[5];
                 _0x27:
000104 99cd      	SBIC 0x19,5
000105 c003      	RJMP _0x28
                +
000106 91e0 0271+LDS R30 , _keys + ( 5 )
                 	__GETB1MN _keys,5
000108 9508      	RET
                 ; 0000 00CD     if(!PINA.6) return keys[6];
                 _0x28:
000109 99ce      	SBIC 0x19,6
00010a c003      	RJMP _0x29
                +
00010b 91e0 0272+LDS R30 , _keys + ( 6 )
                 	__GETB1MN _keys,6
00010d 9508      	RET
                 ; 0000 00CE     if(!PINA.7) return keys[7];
                 _0x29:
00010e 99cf      	SBIC 0x19,7
00010f c003      	RJMP _0x2A
                +
000110 91e0 0273+LDS R30 , _keys + ( 7 )
                 	__GETB1MN _keys,7
000112 9508      	RET
                 ; 0000 00CF     PORTA.0=1;PORTA.1=1;PORTA.2=0;PORTA.3=1;
                 _0x2A:
000113 9ad8      	SBI  0x1B,0
000114 9ad9      	SBI  0x1B,1
000115 98da      	CBI  0x1B,2
000116 9adb      	SBI  0x1B,3
                 ; 0000 00D0     if(!PINA.4) return keys[8];
000117 99cc      	SBIC 0x19,4
000118 c003      	RJMP _0x33
                +
000119 91e0 0274+LDS R30 , _keys + ( 8 )
                 	__GETB1MN _keys,8
00011b 9508      	RET
                 ; 0000 00D1     if(!PINA.5) return keys[9];
                 _0x33:
00011c 99cd      	SBIC 0x19,5
00011d c003      	RJMP _0x34
                +
00011e 91e0 0275+LDS R30 , _keys + ( 9 )
                 	__GETB1MN _keys,9
000120 9508      	RET
                 ; 0000 00D2     if(!PINA.6) return keys[10];
                 _0x34:
000121 99ce      	SBIC 0x19,6
000122 c003      	RJMP _0x35
                +
000123 91e0 0276+LDS R30 , _keys + ( 10 )
                 	__GETB1MN _keys,10
000125 9508      	RET
                 ; 0000 00D3     if(!PINA.7) return keys[11];
                 _0x35:
000126 99cf      	SBIC 0x19,7
000127 c003      	RJMP _0x36
                +
000128 91e0 0277+LDS R30 , _keys + ( 11 )
                 	__GETB1MN _keys,11
00012a 9508      	RET
                 ; 0000 00D4     PORTA.0=1;PORTA.1=1;PORTA.2=1;PORTA.3=0;
                 _0x36:
00012b 9ad8      	SBI  0x1B,0
00012c 9ad9      	SBI  0x1B,1
00012d 9ada      	SBI  0x1B,2
00012e 98db      	CBI  0x1B,3
                 ; 0000 00D5     if(!PINA.4) return keys[12];
00012f 99cc      	SBIC 0x19,4
000130 c003      	RJMP _0x3F
                +
000131 91e0 0278+LDS R30 , _keys + ( 12 )
                 	__GETB1MN _keys,12
000133 9508      	RET
                 ; 0000 00D6     if(!PINA.5) return keys[13];
                 _0x3F:
000134 99cd      	SBIC 0x19,5
000135 c003      	RJMP _0x40
                +
000136 91e0 0279+LDS R30 , _keys + ( 13 )
                 	__GETB1MN _keys,13
000138 9508      	RET
                 ; 0000 00D7     if(!PINA.6) return keys[14];
                 _0x40:
000139 99ce      	SBIC 0x19,6
00013a c003      	RJMP _0x41
                +
00013b 91e0 027a+LDS R30 , _keys + ( 14 )
                 	__GETB1MN _keys,14
00013d 9508      	RET
                 ; 0000 00D8     if(!PINA.7) return keys[15];
                 _0x41:
00013e 99cf      	SBIC 0x19,7
00013f c003      	RJMP _0x42
                +
000140 91e0 027b+LDS R30 , _keys + ( 15 )
                 	__GETB1MN _keys,15
000142 9508      	RET
                 ; 0000 00D9     return 16;
                 _0x42:
000143 e1e0      	LDI  R30,LOW(16)
000144 9508      	RET
                 ; 0000 00DA 
                 ; 0000 00DB     }
                 ; .FEND
                 ;    int getval(char key)
                 ; 0000 00DD     {
                 _getval:
                 ; .FSTART _getval
                 ; 0000 00DE         if (key != 16)  //if any key was pressed
000145 93aa      	ST   -Y,R26
                 ;	key -> Y+0
000146 81a8      	LD   R26,Y
000147 31a0      	CPI  R26,LOW(0x10)
000148 f159      	BREQ _0x43
                 ; 0000 00DF        {
                 ; 0000 00E0        while(1)
                 _0x44:
                 ; 0000 00E1        {
                 ; 0000 00E2         if( key == '=')
000149 81a8      	LD   R26,Y
00014a 33ad      	CPI  R26,LOW(0x3D)
00014b f441      	BRNE _0x47
                 ; 0000 00E3            {
                 ; 0000 00E4                 seconds = digit2;
00014c 2de8      	MOV  R30,R8
00014d e0f0      	LDI  R31,0
00014e 93e0 0268 	STS  _seconds,R30
000150 93f0 0269 	STS  _seconds+1,R31
                 ; 0000 00E5              //   display_on_seven_segment_second(digit2);
                 ; 0000 00E6                 digit1 =0;
000152 2499      	CLR  R9
                 ; 0000 00E7                 break;
000153 c020      	RJMP _0x46
                 ; 0000 00E8            }
                 ; 0000 00E9         if ( key == '+')        //if + was entered
                 _0x47:
000154 81a8      	LD   R26,Y
000155 32ab      	CPI  R26,LOW(0x2B)
000156 f421      	BRNE _0x48
                 ; 0000 00EA            {
                 ; 0000 00EB             minutes= digit2;
000157 2cc8      	MOV  R12,R8
000158 24dd      	CLR  R13
                 ; 0000 00EC            // display_on_seven_segment_minute(digit2); //show on 7Seg
                 ; 0000 00ED             digit1=0;
000159 2499      	CLR  R9
                 ; 0000 00EE 
                 ; 0000 00EF             break;
00015a c019      	RJMP _0x46
                 ; 0000 00F0             }
                 ; 0000 00F1            if(digit1)
                 _0x48:
00015b 2099      	TST  R9
00015c f059      	BREQ _0x49
                 ; 0000 00F2            {
                 ; 0000 00F3               digit2= digit1*10 + key - '0';
00015d 2de9      	MOV  R30,R9
00015e e0aa      	LDI  R26,LOW(10)
00015f 02ea      	MULS R30,R26
000160 01f0      	MOVW R30,R0
000161 81a8      	LD   R26,Y
000162 0fae      	ADD  R26,R30
000163 53a0      	SUBI R26,LOW(48)
000164 2e8a      	MOV  R8,R26
                 ; 0000 00F4               return digit2;
000165 2de8      	MOV  R30,R8
000166 e0f0      	LDI  R31,0
000167 c00c      	RJMP _0x2000001
                 ; 0000 00F5            }
                 ; 0000 00F6           if ( (key >= '0') && (key<= '9') )
                 _0x49:
000168 81a8      	LD   R26,Y
000169 33a0      	CPI  R26,LOW(0x30)
00016a f010      	BRLO _0x4B
00016b 33aa      	CPI  R26,LOW(0x3A)
00016c f008      	BRLO _0x4C
                 _0x4B:
00016d c005      	RJMP _0x4A
                 _0x4C:
                 ; 0000 00F7            {
                 ; 0000 00F8             digit1 = key - '0';
00016e 81e8      	LD   R30,Y
00016f 53e0      	SUBI R30,LOW(48)
000170 2e9e      	MOV  R9,R30
                 ; 0000 00F9            // digit1= digit2 + key - '0';
                 ; 0000 00FA             return digit1;
000171 e0f0      	LDI  R31,0
000172 c001      	RJMP _0x2000001
                 ; 0000 00FB            }
                 ; 0000 00FC 
                 ; 0000 00FD 
                 ; 0000 00FE 
                 ; 0000 00FF        }
                 _0x4A:
000173 cfd5      	RJMP _0x44
                 _0x46:
                 ; 0000 0100 
                 ; 0000 0101 
                 ; 0000 0102       }
                 ; 0000 0103     }
                 _0x43:
                 _0x2000001:
000174 9621      	ADIW R28,1
000175 9508      	RET
                 ; .FEND
                 ;
                 ;    	void LightDancer()
                 ; 0000 0106 	{
                 _LightDancer:
                 ; .FSTART _LightDancer
                 ; 0000 0107 		int a;
                 ; 0000 0108 		char led[]= {
                 ; 0000 0109 			0b10000000,
                 ; 0000 010A 			0b01000000,
                 ; 0000 010B 			0b00100000,
                 ; 0000 010C 			0b00010000,
                 ; 0000 010D 			0b00001000,
                 ; 0000 010E 			0b00000100,
                 ; 0000 010F 			0b00000010,
                 ; 0000 0110 			0b00000001};
                 ; 0000 0111 
                 ; 0000 0112 		for (a=0;a<=7;a++)
000176 9728      	SBIW R28,8
000177 e8e0      	LDI  R30,LOW(128)
000178 83e8      	ST   Y,R30
000179 e4e0      	LDI  R30,LOW(64)
00017a 83e9      	STD  Y+1,R30
00017b e2e0      	LDI  R30,LOW(32)
00017c 83ea      	STD  Y+2,R30
00017d e1e0      	LDI  R30,LOW(16)
00017e 83eb      	STD  Y+3,R30
00017f e0e8      	LDI  R30,LOW(8)
000180 83ec      	STD  Y+4,R30
000181 e0e4      	LDI  R30,LOW(4)
000182 83ed      	STD  Y+5,R30
000183 e0e2      	LDI  R30,LOW(2)
000184 83ee      	STD  Y+6,R30
000185 e0e1      	LDI  R30,LOW(1)
000186 83ef      	STD  Y+7,R30
000187 931a      	ST   -Y,R17
000188 930a      	ST   -Y,R16
                 ;	a -> R16,R17
                 ;	led -> Y+2
                +
000189 e000     +LDI R16 , LOW ( 0 )
00018a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4E:
                +
00018b 3008     +CPI R16 , LOW ( 8 )
00018c e0e0     +LDI R30 , HIGH ( 8 )
00018d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00018e f46c      	BRGE _0x4F
                 ; 0000 0113 		{
                 ; 0000 0114 			PORTB=led[a];
00018f 01de      	MOVW R26,R28
000190 9612      	ADIW R26,2
000191 0fa0      	ADD  R26,R16
000192 1fb1      	ADC  R27,R17
000193 91ec      	LD   R30,X
000194 bbe8      	OUT  0x18,R30
                 ; 0000 0115 			delay_ms(100);
000195 e6a4      	LDI  R26,LOW(100)
000196 e0b0      	LDI  R27,0
000197 940e 01b8 	CALL _delay_ms
                 ; 0000 0116 		};
                +
000199 5f0f     +SUBI R16 , LOW ( - 1 )
00019a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00019b cfef      	RJMP _0x4E
                 _0x4F:
                 ; 0000 0117 		for (a=6;a>=0;a--)
                +
00019c e006     +LDI R16 , LOW ( 6 )
00019d e010     +LDI R17 , HIGH ( 6 )
                 	__GETWRN 16,17,6
                 _0x51:
00019e 2311      	TST  R17
00019f f06a      	BRMI _0x52
                 ; 0000 0118 		{
                 ; 0000 0119 			PORTC=led[a];
0001a0 01de      	MOVW R26,R28
0001a1 9612      	ADIW R26,2
0001a2 0fa0      	ADD  R26,R16
0001a3 1fb1      	ADC  R27,R17
0001a4 91ec      	LD   R30,X
0001a5 bbe5      	OUT  0x15,R30
                 ; 0000 011A 			delay_ms(100);
0001a6 e6a4      	LDI  R26,LOW(100)
0001a7 e0b0      	LDI  R27,0
0001a8 940e 01b8 	CALL _delay_ms
                 ; 0000 011B 		};
                +
0001aa 5001     +SUBI R16 , LOW ( 1 )
0001ab 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0001ac cff1      	RJMP _0x51
                 _0x52:
                 ; 0000 011C 	}
0001ad 8119      	LDD  R17,Y+1
0001ae 8108      	LDD  R16,Y+0
0001af 962a      	ADIW R28,10
0001b0 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 
                 	.DSEG
                 _digit:
000260           	.BYTE 0x8
                 _seconds:
000268           	.BYTE 0x2
                 _remaining_seconds:
00026a           	.BYTE 0x2
                 _keys:
00026c           	.BYTE 0x10
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001b1 93aa      	ST   -Y,R26
0001b2 93ba      	ST   -Y,R27
0001b3 93ea      	ST   -Y,R30
0001b4 93fa      	ST   -Y,R31
0001b5 b7ef      	IN   R30,SREG
0001b6 93ea      	ST   -Y,R30
0001b7 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001b8 9610      	adiw r26,0
0001b9 f039      	breq __delay_ms1
                 __delay_ms0:
0001ba 95a8      	wdr
                +
0001bb ed80     +LDI R24 , LOW ( 0x7D0 )
0001bc e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001bd 9701     +SBIW R24 , 1
0001be f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001bf 9711      	sbiw r26,1
0001c0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001c1 9508      	ret
                 
                 __GETW1P:
0001c2 91ed      	LD   R30,X+
0001c3 91fc      	LD   R31,X
0001c4 9711      	SBIW R26,1
0001c5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   5 r1 :   1 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   5 r7 :   2 
r8 :   4 r9 :   5 r10:   0 r11:   3 r12:   2 r13:   2 r14:   0 r15:   0 
r16:   9 r17:  10 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  42 r27:  13 r28:   7 r29:   1 r30: 127 r31:  21 
x  :  11 y  :  35 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :   7 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   1 brne  :   9 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   3 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   2 
cp    :   1 cpc   :   2 cpi   :   7 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   0 jmp   :  22 ld    :  18 ldd   :   2 ldi   :  62 
lds   :  16 lpm   :   9 lsl   :   3 lsr   :   0 mov   :  10 movw  :  10 
mul   :   0 muls  :   1 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  30 pop   :   0 push  :   0 rcall :   6 ret   :  23 
reti  :   2 rjmp  :  28 rol   :   3 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :  12 sbic  :  16 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :   7 sts   :   2 sub   :   0 subi  :   4 swap  :   0 
tst   :   2 wdr   :   1 
Instructions used: 45 out of 116 (38.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00038c    846     62    908   32768   2.8%
[.dseg] 0x000060 0x00027c      0     28     28    2048   1.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
