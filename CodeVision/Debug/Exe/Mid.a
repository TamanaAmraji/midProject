;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;int LCD_ref=0x01, i=0, digit[2];
;int row = 0, col =-1, pos = -1;
;#define col0    PINA.0
;#define col1    PINA.1
;#define col2    PINA.2
;#define col3    PINA.3
;
;    const int segments[] =
;     {
;        // 0bGFEDCBA
;        0x40, // 0
;        0x79, // 1
;        0x24, // 2
;        0x30, // 3
;        0x19, // 4
;        0x12, // 5
;        0x02, // 6
;        0x78, // 7
;        0x00, // 8
;        0x10 // 9
;    };
;
;char ref[]= {0xF7,0xF6,0xFB,0xF7};

	.DSEG
;
;// Function prototypes
;void display_on_seven_segment(int number);
;char read_keypad();
;
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0021 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0022  //Place your code here
; 0000 0023 
; 0000 0024     PORTD = LCD_ref;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0025     PORTC = ~(segments[digit[i]]);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0026     LCD_ref = LCD_ref<<1;
;PCODE: $0000001C VOL: 0
; 0000 0027     i++;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0028 
; 0000 0029     if (i == 4)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002A     {
; 0000 002B         i = 0;
;PCODE: $00000023 VOL: 0
; 0000 002C         LCD_ref = 0x01;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002D     }
; 0000 002E 
; 0000 002F }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;void main(void)
; 0000 0032 {
;PCODE: $0000002A VOL: 0
; 0000 0033 // Declare your local variables here
; 0000 0034 //  int minutes = 0,seconds = 0;
; 0000 0035 
; 0000 0036     // Initialize ports and pins
; 0000 0037     // Configure SEVENSEG_PORT, KEYPAD_PORT, BUZZER_PORT, and LED_PORT as required
; 0000 0038 
; 0000 0039     // Set ROWS as outputs and COLS as inputs
; 0000 003A //    DDRB = 0xFF; // Assuming keypad is connected to PORTB pins 0-3 as COLS
; 0000 003B //    PORTB = 0x00; // Activate internal pull-ups on PORTB pins 0-3 as COLS
; 0000 003C      DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003D      PORTA=(1<<PORTA7) | (1<<PORTA6) |(1<<PORTA5) |(1<<PORTA4) |(0<<PORTA3) |(0<<PORTA2) |(0<<PORTA1) | (0<<PORTA7);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003E      DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003F      DDRD = 0xFF; // Assuming LEDs are connected to PORTD
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0040 
; 0000 0041 // Timer/Counter 0 initialization
; 0000 0042 // Clock source: System Clock
; 0000 0043 // Clock value: 7.813 kHz
; 0000 0044 // Mode: CTC top=OCR0
; 0000 0045 // OC0 output: Disconnected
; 0000 0046 // Timer Period: 9.984 ms
; 0000 0047 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0048 TCNT0=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0049 OCR0=0x4D;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004A 
; 0000 004B // Timer/Counter 1 initialization
; 0000 004C // Clock source: System Clock
; 0000 004D // Clock value: 31.250 kHz
; 0000 004E // Mode: CTC top=OCR1A
; 0000 004F // OC1A output: Disconnected
; 0000 0050 // OC1B output: Disconnected
; 0000 0051 // Noise Canceler: Off
; 0000 0052 // Input Capture on Falling Edge
; 0000 0053 // Timer Period: 1 s
; 0000 0054 // Timer1 Overflow Interrupt: Off
; 0000 0055 // Input Capture Interrupt: Off
; 0000 0056 // Compare A Match Interrupt: On
; 0000 0057 // Compare B Match Interrupt: On
; 0000 0058 //TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
; 0000 0059 //TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
; 0000 005A //TCNT1H=0x00;
; 0000 005B //TCNT1L=0x00;
; 0000 005C //ICR1H=0x00;
; 0000 005D //ICR1L=0x00;
; 0000 005E //OCR1AH=0x7A;
; 0000 005F //OCR1AL=0x11;
; 0000 0060 //OCR1BH=0x00;
; 0000 0061 //OCR1BL=0x00;
; 0000 0062 //
; 0000 0063 //
; 0000 0064 //// Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0065 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0066 
; 0000 0067 
; 0000 0068  // Read minutes input from keypad
; 0000 0069 // Global enable interrupts
; 0000 006A #asm("sei")
;PCODE: $0000003B VOL: 0
	sei
;PCODE: $0000003C VOL: 0
; 0000 006B while (1)
;PCODE: $0000003D VOL: 0
; 0000 006C       {
; 0000 006D       // Place your code here
; 0000 006E       char key = read_keypad();
; 0000 006F       if(key != 16)
;PCODE: $0000003E VOL: 0
;	key -> Y+0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0070       display_on_seven_segment(key);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0071 
; 0000 0072       }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0073 }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;
;
;
;
;void display_on_seven_segment(int number) {
; 0000 0078 void display_on_seven_segment(int number) {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0079 
; 0000 007A     // Display the given number on the seven segment display
; 0000 007B     int i;
; 0000 007C     const int segments[] =
; 0000 007D      {
; 0000 007E         // 0bGFEDCBA
; 0000 007F         0x40, // 0
; 0000 0080         0x79, // 1
; 0000 0081         0x24, // 2
; 0000 0082         0x30, // 3
; 0000 0083         0x19, // 4
; 0000 0084         0x12, // 5
; 0000 0085         0x02, // 6
; 0000 0086         0x78, // 7
; 0000 0087         0x00, // 8
; 0000 0088         0x10 // 9
; 0000 0089     };
; 0000 008A 
; 0000 008B 
; 0000 008C 
; 0000 008D     // Extract digits from the number
; 0000 008E      digit[1] = number / 10;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;	number -> Y+22
;	i -> R16,R17
;	segments -> Y+2
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008F      digit[2] = number % 10;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0090      //PORTC = ~(segments[digit[i]]);
; 0000 0091 
; 0000 0092 }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;//
;//        char keypad_layout[4][4] = {
;//            {'x', '6', '5', '4'},
;//            {'-', '3', '2', '1'},
;//            {'+', '=', '0', 'c'}
;//        };
;//
;
;    char read_keypad() {
; 0000 009C char read_keypad() {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 009D 
; 0000 009E    // Loop through each ROW and check for key press
; 0000 009F 
; 0000 00A0     PORTA.0=0;PORTA.1=1;PORTA.2=1;PORTA.3=1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00A1     if(!PINA.4) return 0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A2     if(!PINA.5) return 1;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A3     if(!PINA.6) return 2;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00A4     if(!PINA.7) return 3;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A5     PORTA.0=1;PORTA.1=0;PORTA.2=1;PORTA.3=1;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A6     if(!PINA.4) return 4;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A7     if(!PINA.5) return 5;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00A8     if(!PINA.6) return 6;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00A9     if(!PINA.7) return 7;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00AA     PORTA.0=1;PORTA.1=1;PORTA.2=0;PORTA.3=1;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00AB     if(!PINA.4) return 8;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00AC     if(!PINA.5) return 9;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00AD     if(!PINA.6) return 10;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00AE     if(!PINA.7) return 11;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00AF     PORTA.0=1;PORTA.1=1;PORTA.2=1;PORTA.3=0;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00B0     if(!PINA.4) return 12;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00B1     if(!PINA.5) return 13;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00B2     if(!PINA.6) return 14;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00B3     if(!PINA.7) return 15;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00B4     return 16;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00B5 
; 0000 00B6         }
;PCODE: $000000ED VOL: 0
;
;
;
