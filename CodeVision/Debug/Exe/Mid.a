;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;int LCD_ref=0x0D, i=0, digit[2];
;    int row = -1, col =-1, input = -1;
;#define col0    PINA.4
;#define col1    PINA.5
;#define col2    PINA.6
;#define col3    PINA.7
;
;    const int segments[] =
;     {
;        // 0bGFEDCBA
;        0x40, // 0
;        0x79, // 1
;        0x24, // 2
;        0x30, // 3
;        0x19, // 4
;        0x12, // 5
;        0x02, // 6
;        0x78, // 7
;        0x00, // 8
;        0x10 // 9
;    };
;
;    char row_ref[]= {
;            0b00000001,
;            0b00000010,
;            0b00000100,
;            0b00001000
;            };

	.DSEG
;
;// Function prototypes
;void display_on_seven_segment(int number);
;void sound_buzzer();
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028  //Place your code here
; 0000 0029 
; 0000 002A //
; 0000 002B 
; 0000 002C }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;void main(void)
; 0000 002F {
;PCODE: $00000012 VOL: 0
; 0000 0030 // Declare your local variables here
; 0000 0031 int key;  int minutes = 0,seconds = 0;
; 0000 0032 
; 0000 0033     // Initialize ports and pins
; 0000 0034     // Configure SEVENSEG_PORT, KEYPAD_PORT, BUZZER_PORT, and LED_PORT as required
; 0000 0035 
; 0000 0036     // Set ROWS as outputs and COLS as inputs
; 0000 0037     //DDRA = 0x0F; // Assuming keypad is connected to PORTA pins 0-3 as ROWS
; 0000 0038     DDRB = 0xFF; // Assuming keypad is connected to PORTB pins 0-3 as COLS
;	key -> R16,R17
;	minutes -> R18,R19
;	seconds -> R20,R21
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0039     PORTB = 0x00; // Activate internal pull-ups on PORTB pins 0-3 as COLS
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003A     PORTA = 0x00; // Activate internal pull-ups on PORTA pins 0-3 as ROWS
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003B     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003C     DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003D     DDRD = 0xFF; // Assuming LEDs are connected to PORTD
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003E 
; 0000 003F 
; 0000 0040 // Timer/Counter 0 initialization
; 0000 0041 // Clock source: System Clock
; 0000 0042 // Clock value: 7.813 kHz
; 0000 0043 // Mode: CTC top=OCR0
; 0000 0044 // OC0 output: Disconnected
; 0000 0045 // Timer Period: 9.984 ms
; 0000 0046 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0047 TCNT0=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0048 OCR0=0x4D;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0049 
; 0000 004A // Timer/Counter 1 initialization
; 0000 004B // Clock source: System Clock
; 0000 004C // Clock value: 31.250 kHz
; 0000 004D // Mode: CTC top=OCR1A
; 0000 004E // OC1A output: Disconnected
; 0000 004F // OC1B output: Disconnected
; 0000 0050 // Noise Canceler: Off
; 0000 0051 // Input Capture on Falling Edge
; 0000 0052 // Timer Period: 1 s
; 0000 0053 // Timer1 Overflow Interrupt: Off
; 0000 0054 // Input Capture Interrupt: Off
; 0000 0055 // Compare A Match Interrupt: On
; 0000 0056 // Compare B Match Interrupt: On
; 0000 0057 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0058 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0059 TCNT1H=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 005A TCNT1L=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 005B ICR1H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 005C ICR1L=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005D OCR1AH=0x7A;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005E OCR1AL=0x11;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 005F OCR1BH=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0060 OCR1BL=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0061 
; 0000 0062 
; 0000 0063 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0064 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0065 
; 0000 0066 
; 0000 0067  // Read minutes input from keypad
; 0000 0068 // Global enable interrupts
; 0000 0069 #asm("sei")
;PCODE: $0000003F VOL: 0
	sei
;PCODE: $00000040 VOL: 0
; 0000 006A while (1)
;PCODE: $00000041 VOL: 0
; 0000 006B       {
; 0000 006C       // Place your code here
; 0000 006D 
; 0000 006E //      key = read_keypad();
; 0000 006F       display_on_seven_segment(25);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0070 
; 0000 0071       }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0072 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;
;
;
;void display_on_seven_segment(int number) {
; 0000 0077 void display_on_seven_segment(int number) {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0078 
; 0000 0079     // Display the given number on the seven segment display
; 0000 007A     int i;
; 0000 007B     const int segments[] =
; 0000 007C      {
; 0000 007D         // 0bGFEDCBA
; 0000 007E         0x40, // 0
; 0000 007F         0x79, // 1
; 0000 0080         0x24, // 2
; 0000 0081         0x30, // 3
; 0000 0082         0x19, // 4
; 0000 0083         0x12, // 5
; 0000 0084         0x02, // 6
; 0000 0085         0x78, // 7
; 0000 0086         0x00, // 8
; 0000 0087         0x10 // 9
; 0000 0088     };
; 0000 0089 
; 0000 008A 
; 0000 008B 
; 0000 008C     // Extract digits from the number
; 0000 008D      digit[1] = number / 10;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;	number -> Y+22
;	i -> R16,R17
;	segments -> Y+2
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008E      digit[2] = number % 10;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008F      LCD_ref = 0x01;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0090     for (i=0; i<4; i++)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0091     {
; 0000 0092          PORTD = LCD_ref;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0093          PORTC = ~(segments[digit[i]]);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0094          delay_ms(10);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0095          LCD_ref = LCD_ref<<1;
;PCODE: $00000079 VOL: 0
; 0000 0096     }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0097 
; 0000 0098 
; 0000 0099 
; 0000 009A }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
