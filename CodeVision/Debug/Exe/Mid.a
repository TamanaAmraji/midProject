;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;int LCD_ref=0xEF, i=0, digit[2];
;
;    const int segments[] =
;     {
;        // 0bGFEDCBA
;        0x40, // 0
;        0x79, // 1
;        0x24, // 2
;        0x30, // 3
;        0x19, // 4
;        0x12, // 5
;        0x02, // 6
;        0x78, // 7
;        0x00, // 8
;        0x10 // 9
;    };
;
;// Function prototypes
;void display_on_seven_segment(int number);
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 001A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001B // Place your code here
; 0000 001C     PORTA = ~LCD_ref;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001D     PORTC = ~(segments[digit[i]]);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001E     LCD_ref = LCD_ref<<1;
;PCODE: $0000001D VOL: 0
; 0000 001F     i++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0020     if (i == 4)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0021     {
; 0000 0022         i = 0;
;PCODE: $00000024 VOL: 0
; 0000 0023         LCD_ref = 0xEF;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0024     }
; 0000 0025 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;void main(void)
; 0000 0028 {
;PCODE: $0000002B VOL: 0
; 0000 0029 // Declare your local variables here
; 0000 002A 
; 0000 002B // Input/Output Ports initialization
; 0000 002C // Port A initialization
; 0000 002D 
; 0000 002E     // Initialize ports and pins
; 0000 002F     // Configure SEVENSEG_PORT, KEYPAD_PORT, BUZZER_PORT, and LED_PORT as required
; 0000 0030 
; 0000 0031     DDRB = 0x10000000;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0032 
; 0000 0033     // Set ROWS as outputs and COLS as inputs
; 0000 0034     //DDRA = 0x0F; // Assuming keypad is connected to PORTA pins 0-3 as ROWS
; 0000 0035     DDRB = 0x0F; // Assuming keypad is connected to PORTB pins 0-3 as COLS
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0036     PORTA = 0x0F; // Activate internal pull-ups on PORTA pins 0-3 as ROWS
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0037     DDRA=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0038     PORTB = 0xF0; // Activate internal pull-ups on PORTB pins 0-3 as COLS
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0039     DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003A     DDRB=(1<<DDB7); // Assuming buzzer is connected to pin PB0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003B     DDRD = 0xFF; // Assuming LEDs are connected to PORTD
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003C 
; 0000 003D 
; 0000 003E // Timer/Counter 0 initialization
; 0000 003F // Clock source: System Clock
; 0000 0040 // Clock value: 7.813 kHz
; 0000 0041 // Mode: CTC top=OCR0
; 0000 0042 // OC0 output: Disconnected
; 0000 0043 // Timer Period: 9.984 ms
; 0000 0044 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0045 TCNT0=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0046 OCR0=0x4D;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0047 
; 0000 0048 // Timer/Counter 1 initialization
; 0000 0049 // Clock source: System Clock
; 0000 004A // Clock value: 31.250 kHz
; 0000 004B // Mode: CTC top=OCR1A
; 0000 004C // OC1A output: Disconnected
; 0000 004D // OC1B output: Disconnected
; 0000 004E // Noise Canceler: Off
; 0000 004F // Input Capture on Falling Edge
; 0000 0050 // Timer Period: 1 s
; 0000 0051 // Timer1 Overflow Interrupt: Off
; 0000 0052 // Input Capture Interrupt: Off
; 0000 0053 // Compare A Match Interrupt: On
; 0000 0054 // Compare B Match Interrupt: On
; 0000 0055 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0056 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0057 TCNT1H=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0058 TCNT1L=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0059 ICR1H=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005A ICR1L=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 005B OCR1AH=0x7A;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 005C OCR1AL=0x11;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 005D OCR1BH=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 005E OCR1BL=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005F 
; 0000 0060 // Timer/Counter 2 initialization
; 0000 0061 // Clock source: System Clock
; 0000 0062 // Clock value: Timer2 Stopped
; 0000 0063 // Mode: Normal top=0xFF
; 0000 0064 // OC2 output: Disconnected
; 0000 0065 ASSR=0<<AS2;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0066 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0067 TCNT2=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0068 OCR2=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0069 
; 0000 006A // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 006B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 006C 
; 0000 006D // External Interrupt(s) initialization
; 0000 006E // INT0: Off
; 0000 006F // INT1: Off
; 0000 0070 // INT2: Off
; 0000 0071 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0072 MCUCSR=(0<<ISC2);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0073 
; 0000 0074 // USART initialization
; 0000 0075 // USART disabled
; 0000 0076 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0077 
; 0000 0078 // Analog Comparator initialization
; 0000 0079 // Analog Comparator: Off
; 0000 007A // The Analog Comparator's positive input is
; 0000 007B // connected to the AIN0 pin
; 0000 007C // The Analog Comparator's negative input is
; 0000 007D // connected to the AIN1 pin
; 0000 007E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 007F SFIOR=(0<<ACME);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0080 
; 0000 0081 // ADC initialization
; 0000 0082 // ADC disabled
; 0000 0083 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0084 
; 0000 0085 // SPI initialization
; 0000 0086 // SPI disabled
; 0000 0087 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0088 
; 0000 0089 // TWI initialization
; 0000 008A // TWI disabled
; 0000 008B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 008C 
; 0000 008D // Global enable interrupts
; 0000 008E #asm("sei")
;PCODE: $00000070 VOL: 0
	sei
;PCODE: $00000071 VOL: 0
; 0000 008F 
; 0000 0090 while (1)
;PCODE: $00000072 VOL: 0
; 0000 0091       {
; 0000 0092       // Place your code here
; 0000 0093         display_on_seven_segment(25);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0094       //PORTC = ~(0x10);
; 0000 0095       }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0096 }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;void display_on_seven_segment(int number) {
; 0000 0098 void display_on_seven_segment(int number) {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0099 
; 0000 009A     // Display the given number on the seven segment display
; 0000 009B     // Define the segments for each digit (assuming common cathode display)
; 0000 009C     const int segments[] =
; 0000 009D      {
; 0000 009E         // 0bGFEDCBA
; 0000 009F         0x40, // 0
; 0000 00A0         0x79, // 1
; 0000 00A1         0x24, // 2
; 0000 00A2         0x30, // 3
; 0000 00A3         0x19, // 4
; 0000 00A4         0x12, // 5
; 0000 00A5         0x02, // 6
; 0000 00A6         0x78, // 7
; 0000 00A7         0x00, // 8
; 0000 00A8         0x10 // 9
; 0000 00A9     };
; 0000 00AA 
; 0000 00AB     // Extract digits from the number
; 0000 00AC      digit[1] = number / 10;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;	number -> Y+20
;	segments -> Y+0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00AD      digit[2] = number % 10;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00AE 
; 0000 00AF }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
