;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;int LCD_ref=0x0D, i=0, digit[2];
;    int row = 0, col =-1, input = -1, pos = 0;
;#define col0    PINA.4
;#define col1    PINA.5
;#define col2    PINA.6
;#define col3    PINA.7
;
;    const int segments[] =
;     {
;        // 0bGFEDCBA
;        0x40, // 0
;        0x79, // 1
;        0x24, // 2
;        0x30, // 3
;        0x19, // 4
;        0x12, // 5
;        0x02, // 6
;        0x78, // 7
;        0x00, // 8
;        0x10 // 9
;    };
;
;    char row_ref[]= {
;            0b00000001,
;            0b00000010,
;            0b00000100,
;            0b00001000
;            };

	.DSEG
;
;// Function prototypes
;void display_on_seven_segment(int number);
;int read_keypad();
;
;void main(void)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0027 // Declare your local variables here
; 0000 0028 int key;  int minutes = 0,seconds = 0;
; 0000 0029 
; 0000 002A     // Initialize ports and pins
; 0000 002B     // Configure SEVENSEG_PORT, KEYPAD_PORT, BUZZER_PORT, and LED_PORT as required
; 0000 002C 
; 0000 002D     // Set ROWS as outputs and COLS as inputs
; 0000 002E     //DDRA = 0x0F; // Assuming keypad is connected to PORTA pins 0-3 as ROWS
; 0000 002F     DDRB = 0xFF; // Assuming keypad is connected to PORTB pins 0-3 as COLS
;	key -> R16,R17
;	minutes -> R18,R19
;	seconds -> R20,R21
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0030     PORTB = 0x00; // Activate internal pull-ups on PORTB pins 0-3 as COLS
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0031     PORTA = 0x00; // Activate internal pull-ups on PORTA pins 0-3 as ROWS
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0032     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0033     DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0034     DDRD = 0xFF; // Assuming LEDs are connected to PORTD
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0035 
; 0000 0036 // Timer/Counter 1 initialization
; 0000 0037 // Clock source: System Clock
; 0000 0038 // Clock value: 31.250 kHz
; 0000 0039 // Mode: CTC top=OCR1A
; 0000 003A // OC1A output: Disconnected
; 0000 003B // OC1B output: Disconnected
; 0000 003C // Noise Canceler: Off
; 0000 003D // Input Capture on Falling Edge
; 0000 003E // Timer Period: 1 s
; 0000 003F // Timer1 Overflow Interrupt: Off
; 0000 0040 // Input Capture Interrupt: Off
; 0000 0041 // Compare A Match Interrupt: On
; 0000 0042 // Compare B Match Interrupt: On
; 0000 0043 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0044 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0045 TCNT1H=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0046 TCNT1L=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0047 ICR1H=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0048 ICR1L=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0049 OCR1AH=0x7A;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004A OCR1AL=0x11;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004B OCR1BH=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004C OCR1BL=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004D 
; 0000 004E 
; 0000 004F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0050 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0051 
; 0000 0052 
; 0000 0053  // Read minutes input from keypad
; 0000 0054 // Global enable interrupts
; 0000 0055 #asm("sei")
;PCODE: $00000034 VOL: 0
	sei
;PCODE: $00000035 VOL: 0
; 0000 0056 while (1)
;PCODE: $00000036 VOL: 0
; 0000 0057       {
; 0000 0058       // Place your code here
; 0000 0059       char key = read_keypad();
; 0000 005A       //if(key != 0)
; 0000 005B       //display_on_seven_segment(key);
; 0000 005C 
; 0000 005D 
; 0000 005E       }
;PCODE: $00000037 VOL: 0
;	key -> Y+0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005F }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;
;
;
;
;void display_on_seven_segment(int number) {
; 0000 0064 void display_on_seven_segment(int number) {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0065 
; 0000 0066     // Display the given number on the seven segment display
; 0000 0067     int i;
; 0000 0068     const int segments[] =
; 0000 0069      {
; 0000 006A         // 0bGFEDCBA
; 0000 006B         0x40, // 0
; 0000 006C         0x79, // 1
; 0000 006D         0x24, // 2
; 0000 006E         0x30, // 3
; 0000 006F         0x19, // 4
; 0000 0070         0x12, // 5
; 0000 0071         0x02, // 6
; 0000 0072         0x78, // 7
; 0000 0073         0x00, // 8
; 0000 0074         0x10 // 9
; 0000 0075     };
; 0000 0076 
; 0000 0077 
; 0000 0078 
; 0000 0079     // Extract digits from the number
; 0000 007A      digit[1] = number / 10;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;	number -> Y+22
;	i -> R16,R17
;	segments -> Y+2
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007B      digit[2] = number % 10;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007C      LCD_ref = 0x01;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007D     for (i=0; i<4; i++)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007E     {
; 0000 007F          PORTD = LCD_ref;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0080          PORTC = ~(segments[digit[i]]);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0081          delay_ms(1);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0082          LCD_ref = LCD_ref<<1;
;PCODE: $0000006F VOL: 0
; 0000 0083     }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0084 
; 0000 0085 }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;
;
;        char keypad_layout[4][4] = {
;            {'x', '6', '5', '4'},
;            {'-', '3', '2', '1'},
;            {'+', '=', '0', 'c'}
;        };

	.DSEG
;
;
;    int read_keypad() {
; 0000 008F int read_keypad() {

	.CSEG
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0090         // Read input from keypad and return the pressed key
; 0000 0091         char readCols;
; 0000 0092         row++;
;PCODE: $0000007E VOL: 0
;	readCols -> R17
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0093         if(row>3)row=0;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0094         PORTA =  0x01<<row;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0095         //delay_ms(500);
; 0000 0096         return;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0097         readCols = (PINA & 0xF0)>>4;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0098         if(readCols)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0099         {
; 0000 009A             if(readCols & 0x01)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009B             {
; 0000 009C             return (row*4 + 0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 009D             }
; 0000 009E             else if(readCols & 0x02)
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 009F             {
; 0000 00A0             return (row*4 + 1);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00A1             }
; 0000 00A2             else if(readCols & 0x04)
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A3             {
; 0000 00A4             return (row*4 + 2);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A5             }
; 0000 00A6             else if(readCols & 0x08)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00A7             {
; 0000 00A8             return (row*4 + 3);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A9             }
; 0000 00AA         return 0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00AB         }
; 0000 00AC 
; 0000 00AD 
; 0000 00AE 
; 0000 00AF 
; 0000 00B0 
; 0000 00B1 
; 0000 00B2 
; 0000 00B3 //
; 0000 00B4 //        // Loop through each ROW and check for key press
; 0000 00B5 //
; 0000 00B6 //        int row = -1, col =-1;
; 0000 00B7 //
; 0000 00B8 //            for (row = 0; row < 4; row++) {
; 0000 00B9 //                // Activate current ROW
; 0000 00BA //                PORTA = row_ref[row];
; 0000 00BB //                delay_ms(6);
; 0000 00BC //                if (col0 == 1)
; 0000 00BD //                {
; 0000 00BE //                    while(col1 == 1);
; 0000 00BF //                    col=0;
; 0000 00C0 //                    break;
; 0000 00C1 //                }
; 0000 00C2 //                if (col1 == 1)
; 0000 00C3 //                {
; 0000 00C4 //                    while(col1 == 1);
; 0000 00C5 //                    col=1;
; 0000 00C6 //                    break;
; 0000 00C7 //                }
; 0000 00C8 //                if (col2 == 1)
; 0000 00C9 //                {
; 0000 00CA //                    while(col1 == 1);
; 0000 00CB //                    col=2;
; 0000 00CC //                    break;
; 0000 00CD //                }
; 0000 00CE //                if (col3 == 1)
; 0000 00CF //                {
; 0000 00D0 //                    while(col1 == 1);
; 0000 00D1 //                    col=3;
; 0000 00D2 //                    break;
; 0000 00D3 //                }
; 0000 00D4 //            }
; 0000 00D5 //            if(col != -1)
; 0000 00D6 //            {
; 0000 00D7 //             return  (row*4 + col);
; 0000 00D8 //            }
; 0000 00D9         }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;
;
;
