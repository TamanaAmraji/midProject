;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <interrupt.h>
;	flags -> R17

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
	cli
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;// Define pins for seven segment display, keypad, buzzer, and LEDs
;#define SEVENSEG_PORT PORTA
;#define KEYPAD_PORT PORTB
;#define BUZZER_PORT PORTC
;#define LED_PORT PORTD
;
;// Function prototypes
;void init();
;char read_keypad();
;void display_on_seven_segment(int number);
;void countdown_timer(int minutes, int seconds);
;void sound_buzzer();
;void led_animation();
;
;void main()
; 0000 0014 {
;PCODE: $00000017 VOL: 0
; 0000 0015 //    int minutes = 0,seconds = 0;
; 0000 0016 //    char key;
; 0000 0017 //
; 0000 0018     init();
;PCODE: $00000018 VOL: 0
; 0000 0019 //    // Read minutes input from keypad
; 0000 001A //    while(1) {
; 0000 001B //        key = read_keypad();
; 0000 001C //        if(key >= '0' && key <= '9') {
; 0000 001D //            minutes = minutes * 10 + (key - '0');
; 0000 001E //            display_on_seven_segment(minutes);
; 0000 001F //        }
; 0000 0020 //        else if(key == '+') {
; 0000 0021 //            // Read seconds input from keypad
; 0000 0022 //            while(1) {
; 0000 0023 //                key = read_keypad();
; 0000 0024 //                if(key >= '0' && key <= '9') {
; 0000 0025 //                    seconds = seconds * 10 + (key - '0');
; 0000 0026 //                    display_on_seven_segment(seconds);
; 0000 0027 //                }
; 0000 0028 //                else if(key == '=') {
; 0000 0029 //                    display_on_seven_segment(minutes);
; 0000 002A //                    delay_ms(1000);
; 0000 002B //                    display_on_seven_segment(seconds);
; 0000 002C //                    delay_ms(1000);
; 0000 002D //                    break;
; 0000 002E //                }
; 0000 002F //            }
; 0000 0030 //            break;
; 0000 0031 //        }
; 0000 0032 //    }
; 0000 0033 //
; 0000 0034 //    // Wait for ON/C key to start countdown
; 0000 0035     while(1) {
;PCODE: $00000019 VOL: 0
; 0000 0036 //        if(read_keypad() == 'c') {
; 0000 0037 //            countdown_timer(minutes, seconds);
; 0000 0038 //            break;
; 0000 0039         sound_buzzer();
;PCODE: $0000001A VOL: 0
; 0000 003A         }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003B //    }
; 0000 003C //
; 0000 003D //    // Once countdown finishes, sound buzzer and start LED animation
; 0000 003E //    sound_buzzer();
; 0000 003F //    led_animation();
; 0000 0040 
; 0000 0041 }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;void init() {
; 0000 0043 void init() {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0044     // Initialize ports and pins
; 0000 0045     // Configure SEVENSEG_PORT, KEYPAD_PORT, BUZZER_PORT, and LED_PORT as required
; 0000 0046 
; 0000 0047     DDRB = 0x10000000;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0048 
; 0000 0049     // Set ROWS as outputs and COLS as inputs
; 0000 004A     DDRA = 0x0F; // Assuming keypad is connected to PORTA pins 0-3 as ROWS
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 004B     DDRB = 0x0F; // Assuming keypad is connected to PORTB pins 0-3 as COLS
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004C     PORTA = 0xF0; // Activate internal pull-ups on PORTA pins 0-3 as ROWS
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004D     PORTB = 0xF0; // Activate internal pull-ups on PORTB pins 0-3 as COLS
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004E     DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004F     DDRB=(1<<DDB7); // Assuming buzzer is connected to pin PB0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0050     DDRD = 0xFF; // Assuming LEDs are connected to PORTD
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0051 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;char read_keypad() {
; 0000 0053 char read_keypad() {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0054     // Read input from keypad and return the pressed key
; 0000 0055     // Define keypad layout (assuming a 4x4 matrix)
; 0000 0056     char keypad_layout[4][4] = {
; 0000 0057         {'/', '9', '8', '7'},
; 0000 0058         {'x', '6', '5', '4'},
; 0000 0059         {'-', '3', '2', '1'},
; 0000 005A         {'+', '=', '0', 'c'}
; 0000 005B     };
; 0000 005C 
; 0000 005D     // Loop through each ROW and check for key press
; 0000 005E     int row = 0, col =0;
; 0000 005F 
; 0000 0060     for (row = 0; row < 4; row++) {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;	keypad_layout -> Y+4
;	row -> R16,R17
;	col -> R18,R19
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0061         // Activate current ROW
; 0000 0062         PORTA = (PORTA & 0xF0) | ~(1 << row);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0063 
; 0000 0064         // Check for key press in current ROW
; 0000 0065         for (col = 4; col < 8; col++) {
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0066             if (!(PINB & (1 << col))) {  //PORTB?
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0067                 // Key pressed, return corresponding character from keypad layout
; 0000 0068                 return keypad_layout[row][col - 4];
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0069             }
; 0000 006A         }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 006B     }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 006C 
; 0000 006D     // No key pressed, return null character
; 0000 006E     return '\0';
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 006F }
;PCODE: $0000007F VOL: 0
;
;void display_on_seven_segment(int number) {
; 0000 0071 void display_on_seven_segment(int number) {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0072     // Display the given number on the seven segment display
; 0000 0073     // Define the segments for each digit (assuming common cathode display)
; 0000 0074     const int segments[] = {
; 0000 0075         // 0bGFEDCBA
; 0000 0076         0x3F, // 0
; 0000 0077         0x06, // 1
; 0000 0078         0x5B, // 2
; 0000 0079         0x4F, // 3
; 0000 007A         0x66, // 4
; 0000 007B         0x6D, // 5
; 0000 007C         0x7D, // 6
; 0000 007D         0x07, // 7
; 0000 007E         0x7F, // 8
; 0000 007F         0x6F // 9
; 0000 0080     };
; 0000 0081 
; 0000 0082     // Extract digits from the number
; 0000 0083     int digit1 = number / 10;
; 0000 0084     int digit2 = number % 10;
; 0000 0085 
; 0000 0086     // Define the pins connected to the seven segment display
; 0000 0087 
; 0000 0088     // Display the first digit
; 0000 0089     PORTC = segments[digit1];
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;	number -> Y+24
;	segments -> Y+4
;	digit1 -> R16,R17
;	digit2 -> R18,R19
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 008A     // Assume pins C0-C3 are connected to the common cathode/anode of the first digit
; 0000 008B     // Activate the first digit by setting pins C0-C3 LOW and others HIGH
; 0000 008C     PORTC |= 0x0F;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 008D 
; 0000 008E     delay_ms(1); // Adjust delay as needed for display stability
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 008F 
; 0000 0090     // Display the second digit
; 0000 0091     PORTC = segments[digit2];
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0092     // Assume pins C4-C7 are connected to the common cathode/anode of the second digit
; 0000 0093     // Activate the second digit by setting pins C4-C7 LOW and others HIGH
; 0000 0094     PORTC |= 0xF0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0095 
; 0000 0096     delay_ms(1); // Adjust delay as needed for display stability
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0097 
; 0000 0098 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;volatile int remaining_seconds;
;
;void countdown_timer(int minutes, int seconds) {
; 0000 009C void countdown_timer(int minutes, int seconds) {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 009D     // Countdown from the given minutes and seconds
; 0000 009E     // Calculate total seconds
; 0000 009F     remaining_seconds = minutes * 60 + seconds;
;PCODE: $000000AF VOL: 0
;	minutes -> Y+2
;	seconds -> Y+0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 1
; 0000 00A0 
; 0000 00A1     // Set up Timer1 for countdown
; 0000 00A2     TCCR1B |= (1 << CS12) | (1 << CS10); // Set prescaler to 1024
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00A3     TCNT1 = 0; // Initialize counter value
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00A4     OCR1A = 15625; // Timer overflow occurs every second
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A5     TIMSK |= (1 << OCIE1A); // Enable Timer1 Compare A interrupt
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00A6 
; 0000 00A7     sei(); // Enable global interrupts
;PCODE: $000000C0 VOL: 0
	sei
;PCODE: $000000C1 VOL: 0
; 0000 00A8 
; 0000 00A9     while(remaining_seconds > 0) {
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 1
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00AA         // Wait for countdown to finish
; 0000 00AB     }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00AC }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;
;// Timer1 Compare A interrupt service routine
;interrupt [EXT_INT1] void ext_int1_isr(void) {
; 0000 00AF interrupt [3] void ext_int1_isr(void) {
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00B0     remaining_seconds--;
;PCODE: $000000CD VOL: 1
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B1 }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;
;void sound_buzzer()
; 0000 00B4 {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00B5     // Activate the buzzer by setting the corresponding pin HIGH
; 0000 00B6     PINB.7 = 1;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00B7 
; 0000 00B8     // Delay for the buzzer sound duration
; 0000 00B9     delay_ms(200); // Adjust the delay as needed for desired sound duration
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00BA 
; 0000 00BB     // Deactivate the buzzer by setting the corresponding pin LOW
; 0000 00BC     PINB.7 = 0;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00BD }
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;
;void led_animation() {
; 0000 00BF void led_animation() {
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00C0     // Start the LED animation
; 0000 00C1 
; 0000 00C2     // LED dance pattern
; 0000 00C3     int pattern[] = {
; 0000 00C4         0xAA, // Alternating on/off pattern
; 0000 00C5         0x55 // Inverted alternating on/off pattern
; 0000 00C6     };
; 0000 00C7 
; 0000 00C8     // Loop through the pattern to animate LEDs
; 0000 00C9     int i = 0;
; 0000 00CA     for (i = 0; i < sizeof(pattern) / sizeof(pattern[0]); i++) {
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;	pattern -> Y+2
;	i -> R16,R17
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00CB         // Display current pattern on LEDs
; 0000 00CC         PORTD = pattern[i];
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00CD 
; 0000 00CE         // Delay for animation effect
; 0000 00CF         delay_ms(100); // Adjust delay as needed for desired animation speed
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00D0     }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00D1 
; 0000 00D2     // Turn off all LEDs after animation
; 0000 00D3     PORTD = 0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00D4 }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;
