;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;int LCD_ref=0xEF, i=0;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0008 // Place your code here
; 0000 0009     PORTA = ~LCD_ref;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000A     LCD_ref = LCD_ref<<1;
;PCODE: $00000012 VOL: 0
; 0000 000B     i++;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 000C     if (i == 4)
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 000D     {
; 0000 000E         i = 0;
;PCODE: $00000019 VOL: 0
; 0000 000F         LCD_ref = 0xEF;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0010     }
; 0000 0011 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;void main(void)
; 0000 0014 {
;PCODE: $00000020 VOL: 0
; 0000 0015 // Declare your local variables here
; 0000 0016 
; 0000 0017 // Input/Output Ports initialization
; 0000 0018 // Port A initialization
; 0000 0019 
; 0000 001A     // Initialize ports and pins
; 0000 001B     // Configure SEVENSEG_PORT, KEYPAD_PORT, BUZZER_PORT, and LED_PORT as required
; 0000 001C 
; 0000 001D     DDRB = 0x10000000;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001E 
; 0000 001F     // Set ROWS as outputs and COLS as inputs
; 0000 0020     //DDRA = 0x0F; // Assuming keypad is connected to PORTA pins 0-3 as ROWS
; 0000 0021     DDRB = 0x0F; // Assuming keypad is connected to PORTB pins 0-3 as COLS
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0022     PORTA = 0x0F; // Activate internal pull-ups on PORTA pins 0-3 as ROWS
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0023     DDRA=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0024     PORTB = 0xF0; // Activate internal pull-ups on PORTB pins 0-3 as COLS
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0025     DDRC = 0xFF; // Assuming seven segment display is connected to PORTC
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0026     DDRB=(1<<DDB7); // Assuming buzzer is connected to pin PB0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0027     DDRD = 0xFF; // Assuming LEDs are connected to PORTD
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0028 
; 0000 0029 
; 0000 002A // Timer/Counter 0 initialization
; 0000 002B // Clock source: System Clock
; 0000 002C // Clock value: 7.813 kHz
; 0000 002D // Mode: CTC top=OCR0
; 0000 002E // OC0 output: Disconnected
; 0000 002F // Timer Period: 9.984 ms
; 0000 0030 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0031 TCNT0=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0032 OCR0=0x4D;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0033 
; 0000 0034 // Timer/Counter 1 initialization
; 0000 0035 // Clock source: System Clock
; 0000 0036 // Clock value: 31.250 kHz
; 0000 0037 // Mode: CTC top=OCR1A
; 0000 0038 // OC1A output: Disconnected
; 0000 0039 // OC1B output: Disconnected
; 0000 003A // Noise Canceler: Off
; 0000 003B // Input Capture on Falling Edge
; 0000 003C // Timer Period: 1 s
; 0000 003D // Timer1 Overflow Interrupt: Off
; 0000 003E // Input Capture Interrupt: Off
; 0000 003F // Compare A Match Interrupt: On
; 0000 0040 // Compare B Match Interrupt: On
; 0000 0041 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0042 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0043 TCNT1H=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0044 TCNT1L=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0045 ICR1H=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0046 ICR1L=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0047 OCR1AH=0x7A;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0048 OCR1AL=0x11;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0049 OCR1BH=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004A OCR1BL=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004B 
; 0000 004C // Timer/Counter 2 initialization
; 0000 004D // Clock source: System Clock
; 0000 004E // Clock value: Timer2 Stopped
; 0000 004F // Mode: Normal top=0xFF
; 0000 0050 // OC2 output: Disconnected
; 0000 0051 ASSR=0<<AS2;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0052 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0053 TCNT2=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0054 OCR2=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0055 
; 0000 0056 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0057 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (1<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0058 
; 0000 0059 // External Interrupt(s) initialization
; 0000 005A // INT0: Off
; 0000 005B // INT1: Off
; 0000 005C // INT2: Off
; 0000 005D MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005E MCUCSR=(0<<ISC2);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005F 
; 0000 0060 // USART initialization
; 0000 0061 // USART disabled
; 0000 0062 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0063 
; 0000 0064 // Analog Comparator initialization
; 0000 0065 // Analog Comparator: Off
; 0000 0066 // The Analog Comparator's positive input is
; 0000 0067 // connected to the AIN0 pin
; 0000 0068 // The Analog Comparator's negative input is
; 0000 0069 // connected to the AIN1 pin
; 0000 006A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006B SFIOR=(0<<ACME);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 006C 
; 0000 006D // ADC initialization
; 0000 006E // ADC disabled
; 0000 006F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0070 
; 0000 0071 // SPI initialization
; 0000 0072 // SPI disabled
; 0000 0073 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0074 
; 0000 0075 // TWI initialization
; 0000 0076 // TWI disabled
; 0000 0077 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0078 
; 0000 0079 // Global enable interrupts
; 0000 007A #asm("sei")
;PCODE: $00000065 VOL: 0
	sei
;PCODE: $00000066 VOL: 0
; 0000 007B 
; 0000 007C while (1)
;PCODE: $00000067 VOL: 0
; 0000 007D       {
; 0000 007E       // Place your code here
; 0000 007F 
; 0000 0080       }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0081 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
